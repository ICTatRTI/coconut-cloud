var matchResults;

matchResults = document.location.pathname.match(/^\/(.*)\/_design\/(.*?)\//);

Backbone.couch_connector.config.db_name = matchResults[1];

Backbone.couch_connector.config.ddoc_name = matchResults[2];

Backbone.couch_connector.config.global_changes = false;

var User, UserCollection,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

User = (function(superClass) {
  extend(User, superClass);

  function User() {
    return User.__super__.constructor.apply(this, arguments);
  }

  User.prototype.url = "/user";

  User.prototype.username = function() {
    return this.get("_id").replace(/^user\./, "");
  };

  User.prototype.passwordIsValid = function(password) {
    return this.get("password") === password;
  };

  User.prototype.isAdmin = function() {
    return _(this.get("roles")).contains("admin");
  };

  User.prototype.login = function() {
    $.cookie('current_user', this.username());
    $("#user").html(this.username());
    $("a[href=#logout]").show();
    $("a[href=#login]").hide();
    if (this.isAdmin()) {
      $("#manage-button").show();
    } else {
      $("#manage-button").hide();
    }
    return User.currentUser = this;
  };

  User.prototype.refreshLogin = function() {
    return this.login();
  };

  return User;

})(Backbone.Model);

User.isAuthenticated = function(options) {
  var user;
  if ($.cookie('current_user') != null) {
    user = new User({
      _id: "user." + ($.cookie('current_user'))
    });
    return user.fetch({
      success: function() {
        user.refreshLogin();
        return options.success(user);
      },
      error: function() {
        return options.error();
      }
    });
  } else {
    return options.error();
  }
};

User.logout = function() {
  $.cookie('current_user', "");
  $("#user").html("");
  $("a[href=#logout]").hide();
  $("a[href=#login]").show();
  return User.currentUser = null;
};

UserCollection = (function(superClass) {
  extend(UserCollection, superClass);

  function UserCollection() {
    return UserCollection.__super__.constructor.apply(this, arguments);
  }

  UserCollection.prototype.model = User;

  UserCollection.prototype.url = '/user';

  return UserCollection;

})(Backbone.Collection);

var Config,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Config = (function(superClass) {
  extend(Config, superClass);

  function Config() {
    return Config.__super__.constructor.apply(this, arguments);
  }

  Config.prototype.initialize = function() {
    return this.set({
      _id: "coconut.config"
    });
  };

  Config.prototype.fetch = function(options) {
    return Config.__super__.fetch.call(this, {
      success: function() {
        Coconut.config.local = new LocalConfig();
        return Coconut.config.local.fetch({
          success: function() {
            return typeof options.success === "function" ? options.success() : void 0;
          },
          error: function() {
            return typeof options.error === "function" ? options.error() : void 0;
          }
        });
      },
      error: function() {
        return typeof options.error === "function" ? options.error() : void 0;
      }
    });
  };

  Config.prototype.url = "/configuration";

  Config.prototype.title = function() {
    return this.get("title") || "Coconut";
  };

  Config.prototype.database_name = function() {
    return Backbone.couch_connector.config.db_name;
  };

  Config.prototype.design_doc_name = function() {
    return Backbone.couch_connector.config.ddoc_name;
  };

  Config.prototype.cloud_url = function() {
    return "" + (this.get("synchronization_target"));
  };

  Config.prototype.cloud_url_with_credentials = function() {
    return this.cloud_url().replace(/http:\/\//, "http://" + (this.get("cloud_credentials")) + "@");
  };

  return Config;

})(Backbone.Model);

var Question,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Question = (function(superClass) {
  extend(Question, superClass);

  function Question() {
    this.summaryFieldNames = bind(this.summaryFieldNames, this);
    this.resultSummaryFields = bind(this.resultSummaryFields, this);
    return Question.__super__.constructor.apply(this, arguments);
  }

  Question.prototype.type = function() {
    return this.get("type");
  };

  Question.prototype.label = function() {
    return this.get("label") || this.get("id") || this.get("_id");
  };

  Question.prototype.safeLabel = function() {
    return this.label().replace(/[^a-zA-Z0-9 -]/g, "").replace(/[ -]/g, "");
  };

  Question.prototype.repeatable = function() {
    return this.get("repeatable");
  };

  Question.prototype.questions = function() {
    return this.get("questions");
  };

  Question.prototype.value = function() {
    if (this.get("value") != null) {
      return this.get("value");
    } else {
      return "";
    }
  };

  Question.prototype.required = function() {
    if (this.get("required") != null) {
      return this.get("required");
    } else {
      return "true";
    }
  };

  Question.prototype.validation = function() {
    if (this.get("validation") != null) {
      return this.get("validation");
    } else {
      return null;
    }
  };

  Question.prototype.skipLogic = function() {
    return this.get("skip_logic") || "";
  };

  Question.prototype.actionOnChange = function() {
    return this.get("action_on_change") || "";
  };

  Question.prototype.attributeSafeText = function() {
    var returnVal;
    returnVal = this.get("label") != null ? this.get("label") : this.get("id");
    return returnVal.replace(/[^a-zA-Z0-9]/g, "");
  };

  Question.prototype.url = "/question";

  Question.prototype.set = function(attributes) {
    if (attributes.questions != null) {
      attributes.questions = _.map(attributes.questions, function(question) {
        return new Question(question);
      });
    }
    if (attributes.id != null) {
      attributes._id = attributes.id;
    }
    return Question.__super__.set.call(this, attributes);
  };

  Question.prototype.loadFromDesigner = function(domNode) {
    var attribute, i, len, property, ref, result;
    result = Question.fromDomNode(domNode);
    if (result.length === 1) {
      result = result[0];
      this.set({
        id: result.id
      });
      ref = ["label", "type", "repeatable", "required", "validation"];
      for (i = 0, len = ref.length; i < len; i++) {
        property = ref[i];
        attribute = {};
        attribute[property] = result.get(property);
        this.set(attribute);
      }
      return this.set({
        questions: result.questions()
      });
    } else {
      throw "More than one root node";
    }
  };

  Question.prototype.resultSummaryFields = function() {
    var i, numberOfFields, resultSummaryFields, results, returnValue;
    resultSummaryFields = this.get("resultSummaryFields");
    if (resultSummaryFields) {
      return resultSummaryFields;
    } else {
      numberOfFields = Math.min(2, this.questions().length - 1);
      returnValue = {};
      _.each((function() {
        results = [];
        for (var i = 0; 0 <= numberOfFields ? i <= numberOfFields : i >= numberOfFields; 0 <= numberOfFields ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this), (function(_this) {
        return function(index) {
          var ref;
          return returnValue[(ref = _this.questions()[index]) != null ? ref.label() : void 0] = "on";
        };
      })(this));
      return returnValue;
    }
  };

  Question.prototype.summaryFieldNames = function() {
    return _.keys(this.resultSummaryFields());
  };

  Question.prototype.summaryFieldKeys = function() {
    return _.map(this.summaryFieldNames(), function(key) {
      return key.replace(/[^a-zA-Z0-9 -]/g, "").replace(/[ -]/g, "");
    });
  };

  return Question;

})(Backbone.Model);

Question.fromDomNode = function(domNode) {
  return _(domNode).chain().map((function(_this) {
    return function(question) {
      var attribute, i, id, len, property, propertyValue, ref, result;
      question = $(question);
      id = question.attr("id");
      if (question.children("#rootQuestionName").length > 0) {
        id = question.children("#rootQuestionName").val();
      }
      if (!id) {
        return;
      }
      result = new Question;
      result.set({
        id: id
      });
      ref = ["label", "type", "repeatable", "select-options", "radio-options", "autocomplete-options", "validation", "required", "action_on_questions_loaded", "skip_logic", "action_on_change", "image-path", "image-style"];
      for (i = 0, len = ref.length; i < len; i++) {
        property = ref[i];
        attribute = {};
        propertyValue = question.find("#" + property + "-" + id).val();
        if (property === "required") {
          propertyValue = String(question.find("#" + property + "-" + id).is(":checked"));
        }
        if (propertyValue != null) {
          attribute[property] = propertyValue;
          result.set(attribute);
        }
      }
      result.set({
        safeLabel: result.safeLabel()
      });
      if (question.find(".question-definition").length > 0) {
        result.set({
          questions: Question.fromDomNode(question.children(".question-definition"))
        });
      }
      return result;
    };
  })(this)).compact().value();
};

var QuestionCollection,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

QuestionCollection = (function(superClass) {
  extend(QuestionCollection, superClass);

  function QuestionCollection() {
    return QuestionCollection.__super__.constructor.apply(this, arguments);
  }

  QuestionCollection.prototype.model = Question;

  QuestionCollection.prototype.url = '/question';

  return QuestionCollection;

})(Backbone.Collection);

var Result,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Result = (function(superClass) {
  extend(Result, superClass);

  function Result() {
    return Result.__super__.constructor.apply(this, arguments);
  }

  Result.prototype.initialize = function() {
    if (!this.attributes.createdAt) {
      this.set({
        createdAt: moment(new Date()).format(Coconut.config.get("date_format"))
      });
    }
    if (!this.attributes.lastModifiedAt) {
      return this.set({
        lastModifiedAt: moment(new Date()).format(Coconut.config.get("date_format"))
      });
    }
  };

  Result.prototype.url = "/result";

  Result.prototype.question = function() {
    return this.get("question");
  };

  Result.prototype.tags = function() {
    var tags;
    tags = this.get("Tags");
    if (tags != null) {
      return tags.split(/, */);
    }
    return [];
  };

  Result.prototype.complete = function() {
    var complete;
    if (_.include(this.tags(), "complete")) {
      return true;
    }
    complete = this.get("complete");
    if (typeof complete === "undefined") {
      complete = this.get("Complete");
    }
    if (complete === null || typeof complete === "undefined") {
      return false;
    }
    if (complete === true || complete.match(/true|yes/)) {
      return true;
    }
  };

  Result.prototype.shortString = function() {
    var result;
    result = this.string;
    if (result.length > 40) {
      return result.substring(0, 40) + "...";
    } else {
      return result;
    }
  };

  Result.prototype.summaryKeys = function(question) {
    var relevantKeys;
    relevantKeys = question.summaryFieldKeys();
    if (relevantKeys.length === 0) {
      relevantKeys = _.difference(_.keys(this.toJSON()), ["_id", "_rev", "complete", "question", "collection"]);
    }
    return relevantKeys;
  };

  Result.prototype.summaryValues = function(question) {
    return _.map(this.summaryKeys(question), (function(_this) {
      return function(key) {
        var returnVal;
        returnVal = _this.get(key) || "";
        if (typeof returnVal === "object") {
          returnVal = JSON.stringify(returnVal);
        }
        return returnVal;
      };
    })(this));
  };

  Result.prototype.get = function(attribute) {
    var identifyingAttributes, original;
    original = Result.__super__.get.call(this, attribute);
    if ((original != null) && Coconut.config.local.get("mode") === "cloud") {
      identifyingAttributes = Coconut.config.get("identifying_attributes");
      if ((identifyingAttributes != null) && _.contains(identifyingAttributes, attribute)) {
        return b64_sha1(original);
      }
    }
    return original;
  };

  Result.prototype.toJSON = function() {
    var json;
    json = Result.__super__.toJSON.call(this);
    if (Coconut.config.local.get("mode") === "cloud") {
      _.each(json, (function(_this) {
        return function(value, key) {
          if ((value != null) && _.contains(_this.identifyingAttributes, key)) {
            return json[key] = b64_sha1(value);
          }
        };
      })(this));
    }
    return json;
  };

  Result.prototype.save = function(key, value, options) {
    this.set({
      user: $.cookie('current_user'),
      lastModifiedAt: moment(new Date()).format(Coconut.config.get("date_format"))
    });
    return Result.__super__.save.call(this, key, value, options);
  };

  return Result;

})(Backbone.Model);

var ResultCollection,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultCollection = (function(superClass) {
  extend(ResultCollection, superClass);

  function ResultCollection() {
    return ResultCollection.__super__.constructor.apply(this, arguments);
  }

  ResultCollection.prototype.model = Result;

  ResultCollection.prototype.url = '/result';

  ResultCollection.prototype.db = {
    view: "resultsByQuestionAndComplete"
  };

  ResultCollection.prototype.fetch = function(options) {
    if (options == null) {
      options = {};
    }
    if (options.include_docs == null) {
      options.include_docs = true;
    }
    if (options != null ? options.question : void 0) {
      options.descending = "true";
      if (options.isComplete != null) {
        options.startkey = options.question + ":" + options.isComplete + ":z";
        options.endkey = options.question + ":" + options.isComplete;
      } else {
        options.startkey = options.question + ":z";
        options.endkey = options.question;
      }
    }
    return ResultCollection.__super__.fetch.call(this, options);
  };

  ResultCollection.prototype.notSent = function() {
    return this.filter(function(result) {
      var ref;
      return !((ref = result.get("sentTo")) != null ? ref.length : void 0);
    });
  };

  ResultCollection.prototype.filteredByQuestionCategorizedByStatus = function(questionType) {
    var returnObject;
    returnObject = {};
    returnObject.complete = [];
    returnObject.notCompete = [];
    this.each(function(result) {
      if (result.get("question") !== questionType) {
        return;
      }
      switch (result.get("complete")) {
        case true:
          return returnObject.complete.push(result);
        default:
          return returnObject.notComplete.push(result);
      }
    });
    return returnObject;
  };

  ResultCollection.prototype.filterByQuestionType = function(questionType) {
    return this.filter(function(result) {
      return result.get("question") === questionType;
    });
  };

  ResultCollection.prototype.partialResults = function(questionType) {
    return this.filter(function(result) {
      return result.get("question") === questionType && !result.complete();
    });
  };

  return ResultCollection;

})(Backbone.Collection);

var Sync,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Sync = (function(superClass) {
  extend(Sync, superClass);

  function Sync() {
    this.replicateApplicationDocs = bind(this.replicateApplicationDocs, this);
    this.getFromCloud = bind(this.getFromCloud, this);
    this.log = bind(this.log, this);
    this.last_get_time = bind(this.last_get_time, this);
    this.was_last_get_successful = bind(this.was_last_get_successful, this);
    this.last_send_time = bind(this.last_send_time, this);
    this.was_last_send_successful = bind(this.was_last_send_successful, this);
    this.last_send = bind(this.last_send, this);
    return Sync.__super__.constructor.apply(this, arguments);
  }

  Sync.prototype.initialize = function() {
    return this.set({
      _id: "SyncLog"
    });
  };

  Sync.prototype.url = "/sync";

  Sync.prototype.target = function() {
    return Coconut.config.cloud_url();
  };

  Sync.prototype.last_send = function() {
    return this.get("last_send_result");
  };

  Sync.prototype.was_last_send_successful = function() {
    var last_send_data;
    if (this.get("last_send_error") === true) {
      return false;
    }
    last_send_data = this.last_send();
    if (last_send_data == null) {
      return false;
    }
    if ((last_send_data.no_changes != null) && last_send_data.no_changes === true) {
      return true;
    }
    return (last_send_data.docs_read === last_send_data.docs_written) && last_send_data.doc_write_failures === 0;
  };

  Sync.prototype.last_send_time = function() {
    var result;
    result = this.get("last_send_time");
    if (result) {
      return moment(this.get("last_send_time")).fromNow();
    } else {
      return "never";
    }
  };

  Sync.prototype.was_last_get_successful = function() {
    return this.get("last_get_success");
  };

  Sync.prototype.last_get_time = function() {
    var result;
    result = this.get("last_get_time");
    if (result) {
      return moment(this.get("last_get_time")).fromNow();
    } else {
      return "never";
    }
  };

  Sync.prototype.sendToCloud = function(options) {
    return this.fetch({
      error: (function(_this) {
        return function(error) {
          return _this.log("Unable to fetch Sync doc: " + (JSON.stringify(error)));
        };
      })(this),
      success: (function(_this) {
        return function() {
          _this.log("Checking for internet. (Is " + (Coconut.config.cloud_url()) + " is reachable?) Please wait.");
          return $.ajax({
            dataType: "jsonp",
            url: Coconut.config.cloud_url(),
            error: function(error) {
              _this.log("ERROR! " + (Coconut.config.cloud_url()) + " is not reachable. Do you have enough airtime? Are you on WIFI?  Either the internet is not working or the site is down: " + (JSON.stringify(error)));
              options.error();
              return _this.save({
                last_send_error: true
              });
            },
            success: function() {
              _this.log((Coconut.config.cloud_url()) + " is reachable, so internet is available.");
              _this.log("Creating list of all results on the tablet. Please wait.");
              return $.couch.db(Coconut.config.database_name()).view((Coconut.config.design_doc_name()) + "/results", {
                include_docs: false,
                error: function(result) {
                  _this.log("Could not retrieve list of results: " + (JSON.stringify(error)));
                  options.error();
                  return _this.save({
                    last_send_error: true
                  });
                },
                success: function(result) {
                  var resultIDs;
                  _this.log("Synchronizing " + result.rows.length + " results. Please wait.");
                  resultIDs = _.pluck(result.rows, "id");
                  return $.couch.db(Coconut.config.database_name()).saveDoc({
                    collection: "log",
                    action: "sendToCloud",
                    user: User.currentUser.id,
                    time: moment().format(Coconut.config.get("date_format"))
                  }, {
                    error: function(error) {
                      return _this.log("Could not create log file: " + (JSON.stringify(error)));
                    },
                    success: function() {
                      $.couch.replicate(Coconut.config.database_name(), Coconut.config.cloud_url_with_credentials(), {
                        success: function(result) {
                          _this.log("Send data finished: created, updated or deleted " + result.docs_written + " results on the server.");
                          _this.save({
                            last_send_result: result,
                            last_send_error: false,
                            last_send_time: new Date().getTime()
                          });
                          return _this.sendLogMessagesToCloud({
                            success: function() {
                              return options.success();
                            },
                            error: function(error) {
                              this.save({
                                last_send_error: true
                              });
                              return options.error(error);
                            }
                          });
                        }
                      }, {
                        doc_ids: resultIDs
                      });
                      return Coconut.menuView.checkReplicationStatus();
                    }
                  });
                }
              });
            }
          });
        };
      })(this)
    });
  };

  Sync.prototype.log = function(message) {
    return Coconut.debug(message);
  };

  Sync.prototype.sendLogMessagesToCloud = function(options) {
    return this.fetch({
      error: (function(_this) {
        return function(error) {
          return _this.log("Unable to fetch Sync doc: " + (JSON.stringify(error)));
        };
      })(this),
      success: (function(_this) {
        return function() {
          return $.couch.db(Coconut.config.database_name()).view((Coconut.config.design_doc_name()) + "/byCollection", {
            key: "log",
            include_docs: false,
            error: function(error) {
              _this.log("Could not retrieve list of log entries: " + (JSON.stringify(error)));
              options.error(error);
              return _this.save({
                last_send_error: true
              });
            },
            success: function(result) {
              var logIDs;
              _this.log("Sending " + result.rows.length + " log entries. Please wait.");
              logIDs = _.pluck(result.rows, "id");
              $.couch.replicate(Coconut.config.database_name(), Coconut.config.cloud_url_with_credentials(), {
                success: function(result) {
                  _this.save({
                    last_send_result: result,
                    last_send_error: false,
                    last_send_time: new Date().getTime()
                  });
                  _this.log("Successfully sent " + result.docs_written + " log messages to the server.");
                  return options.success();
                },
                error: function(error) {
                  _this.log("Could not send log messages to the server: " + (JSON.stringify(error)));
                  _this.save({
                    last_send_error: true
                  });
                  return typeof options.error === "function" ? options.error(error) : void 0;
                }
              }, {
                doc_ids: logIDs
              });
              return Coconut.menuView.checkReplicationStatus();
            }
          });
        };
      })(this)
    });
  };

  Sync.prototype.getFromCloud = function(options) {
    return this.fetch({
      error: (function(_this) {
        return function(error) {
          return _this.log("Unable to fetch Sync doc: " + (JSON.stringify(error)));
        };
      })(this),
      success: (function(_this) {
        return function() {
          _this.log("Checking that " + (Coconut.config.cloud_url()) + " is reachable. Please wait.");
          return $.ajax({
            dataType: "jsonp",
            url: Coconut.config.cloud_url(),
            error: function(error) {
              _this.log("ERROR! " + (Coconut.config.cloud_url()) + " is not reachable. Do you have enough airtime? Are you on WIFI?  Either the internet is not working or the site is down: " + (JSON.stringify(error)));
              return typeof options.error === "function" ? options.error(error) : void 0;
            },
            success: function() {
              _this.log((Coconut.config.cloud_url()) + " is reachable, so internet is available.");
              return _this.fetch({
                success: function() {
                  _this.log("Updating users, forms and the design document. Please wait.");
                  return _this.replicateApplicationDocs({
                    error: function(error) {
                      $.couch.logout();
                      _this.log("ERROR updating application: " + (JSON.stringify(error)));
                      _this.save({
                        last_get_success: false
                      });
                      return options != null ? typeof options.error === "function" ? options.error(error) : void 0 : void 0;
                    },
                    success: function() {
                      $.couch.logout();
                      return $.couch.db(Coconut.config.database_name()).saveDoc({
                        collection: "log",
                        action: "getFromCloud",
                        user: User.currentUser.id,
                        time: moment().format(Coconut.config.get("date_format"))
                      }, {
                        error: function(error) {
                          return _this.log("Could not create log file " + (JSON.stringify(error)));
                        },
                        success: function() {
                          _this.log("Sending log messages to cloud.");
                          return _this.sendLogMessagesToCloud({
                            success: function() {
                              _this.log("Finished, refreshing app in 5 seconds...");
                              return _this.fetch({
                                error: function(error) {
                                  return _this.log("Unable to fetch Sync doc: " + (JSON.stringify(error)));
                                },
                                success: function() {
                                  _this.save({
                                    last_get_success: true,
                                    last_get_time: new Date().getTime()
                                  });
                                  if (options != null) {
                                    if (typeof options.success === "function") {
                                      options.success();
                                    }
                                  }
                                  return _.delay(function() {
                                    return document.location.reload();
                                  }, 5000);
                                }
                              });
                            }
                          });
                        }
                      });
                    }
                  });
                }
              });
            }
          });
        };
      })(this)
    });
  };

  Sync.prototype.replicate = function(options) {
    return $.couch.login({
      name: Coconut.config.get("local_couchdb_admin_username"),
      password: Coconut.config.get("local_couchdb_admin_password"),
      success: function() {
        $.couch.replicate(Coconut.config.cloud_url_with_credentials(), Coconut.config.database_name(), {
          success: function() {
            return options.success();
          },
          error: function() {
            return options.error();
          }
        }, options.replicationArguments);
        return Coconut.menuView.checkReplicationStatus();
      },
      error: function() {
        return console.log("Unable to login as local admin for replicating the design document (main application)");
      }
    });
  };

  Sync.prototype.replicateApplicationDocs = function(options) {
    return $.ajax({
      dataType: "jsonp",
      url: (Coconut.config.cloud_url_with_credentials()) + "/_design/" + (Coconut.config.design_doc_name()) + "/_view/docIDsForUpdating",
      include_docs: false,
      error: (function(_this) {
        return function(a, b, error) {
          return typeof options.error === "function" ? options.error(error) : void 0;
        };
      })(this),
      success: (function(_this) {
        return function(result) {
          var doc_ids;
          doc_ids = _.pluck(result.rows, "id");
          doc_ids.push("_design/" + (Coconut.config.design_doc_name()));
          _this.log("Updating " + doc_ids.length + " docs (users, forms and the design document). Please wait.");
          return _this.replicate(_.extend(options, {
            replicationArguments: {
              doc_ids: doc_ids
            }
          }));
        };
      })(this)
    });
  };

  return Sync;

})(Backbone.Model);

var LocalConfig,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LocalConfig = (function(superClass) {
  extend(LocalConfig, superClass);

  function LocalConfig() {
    return LocalConfig.__super__.constructor.apply(this, arguments);
  }

  LocalConfig.prototype.initialize = function() {
    return this.set({
      _id: "coconut.config.local"
    });
  };

  LocalConfig.prototype.url = "/local_configuration";

  return LocalConfig;

})(Backbone.Model);

var Message,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Message = (function(superClass) {
  extend(Message, superClass);

  function Message() {
    return Message.__super__.constructor.apply(this, arguments);
  }

  Message.prototype.url = "/message";

  Message.prototype.sendSMS = function(options) {
    var to;
    to = (this.get("to")).replace(/^07/, "2557");
    return $.ajax({
      url: 'https://CHANGEME/bulksms/dispatch.php',
      dataType: "jsonp",
      data: {
        user: 'user',
        password: 'pass',
        msisdn: to,
        message: this.get("text")
      },
      success: function() {
        return options.success();
      },
      error: function(error) {
        console.log(error);
        if (error.statusText === "success") {
          return options.success();
        } else {
          return options.error(error);
        }
      }
    });
  };

  return Message;

})(Backbone.Model);

var MessageCollection,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MessageCollection = (function(superClass) {
  extend(MessageCollection, superClass);

  function MessageCollection() {
    return MessageCollection.__super__.constructor.apply(this, arguments);
  }

  MessageCollection.prototype.model = Message;

  MessageCollection.prototype.url = "/message";

  return MessageCollection;

})(Backbone.Collection);

var Help,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Help = (function(superClass) {
  extend(Help, superClass);

  function Help() {
    return Help.__super__.constructor.apply(this, arguments);
  }

  Help.prototype.initialize = function() {};

  Help.prototype.url = "/help";

  return Help;

})(Backbone.Model);

var LoginView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LoginView = (function(superClass) {
  extend(LoginView, superClass);

  function LoginView() {
    this.render = bind(this.render, this);
    return LoginView.__super__.constructor.apply(this, arguments);
  }

  LoginView.prototype.el = '#content';

  LoginView.prototype.render = function() {
    this.$el.html("<style> #login_wrapper{ font-size: 200%; width:50%; margin: 0px auto; } #login_message{ margin-top: 20px; margin-bottom: 20px; } #login_form input{ font-size: 100%; display: block; } #login_form input[type=submit]{ height: 2em; } </style> <div id='login_wrapper'> <div id='login_message'>Please login to continue:</div> <form id='login_form'> <label for='username'>Username</label> <input type='text' id='username' name='username'> <label for='password'>Password</label> <input id='password' name='password' type='password'> <input type='submit' value='Login'> </form> </div>");
    $("input[type=text],input[type=password]").textinput();
    return $("input[type=submit]").button();
  };

  LoginView.prototype.events = {
    "submit form#login_form": "login"
  };

  LoginView.prototype.updateNavBar = function() {};

  LoginView.prototype.login = function() {
    var loginData, user;
    loginData = $('#login_form').toObject();
    user = new User({
      _id: "user." + loginData.username
    });
    user.fetch({
      success: (function(_this) {
        return function() {
          if (user.passwordIsValid(loginData.password)) {
            user.login();
            return _this.callback.success();
          } else {
            return $('#login_message').html("Wrong password");
          }
        };
      })(this),
      error: (function(_this) {
        return function() {
          return $('#login_message').html("Wrong username");
        };
      })(this)
    });
    return false;
  };

  return LoginView;

})(Backbone.View);

var DesignView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DesignView = (function(superClass) {
  extend(DesignView, superClass);

  function DesignView() {
    this.render = bind(this.render, this);
    return DesignView.__super__.constructor.apply(this, arguments);
  }

  DesignView.prototype.initialize = function() {
    return this.question = new Question();
  };

  DesignView.prototype.el = '#content';

  DesignView.prototype.render = function() {
    var templateData;
    templateData = {};
    templateData.types = this.questionTypes;
    $("#content").html(this.template(templateData));
    return this.basicMode();
  };

  DesignView.prototype.template = Handlebars.compile("<div id='design-view'> <h3> Design </h3> <small> <b>Instructions</b>: <p>Use the drop down below to select the type of questions that you will be asking. Click <button>Preview</button> to see what the questions will look like.</p> <div class='advanced'><b>Advanced: </b><p>Use <img title='repeat' src='images/repeat.png' style='background-color:#DDD'/> to make the question repeatable. If you want to group questions together to form a repeatable block then click <img title='group' src='images/group.png' style='background-color:#DDD'/> between the questions and use the <img title='repeat' src='images/repeat.png' style='background-color:#DDD'/> as before. Ungroup by using <img title='ungroup' src='images/ungroup.png' style='background-color:#DDD'/>.</p> </div> </small> <hr/> <div id='questions'> <label for='rootQuestionName'>Name</label> <input id='rootQuestionName' name='rootQuestionName' type='text'/> </div> <label for='element_selector'>Add questions</label> <select id='element_selector'> {{#each types}} <option>{{this}}</option> {{/each}} </select> <button>Add</button><br/> <button type='button'>Save</button> <button>Preview</button> <button>Advanced Mode</button> <hr/> <form id='render'></form> <div id='form_output'></form> </div>");

  DesignView.prototype.questionTypes = ["text", "number", "date", "datetime", "textarea", "select", "hidden", "radio", "checkbox", "autocomplete from list", "autocomplete from previous entries", "location", "image"];

  DesignView.prototype.events = {
    "click #design-view button:contains(Add)": "add",
    "click #design-view button[title=group]": "groupClick",
    "click #design-view button[title=ungroup]": "ungroupClick",
    "click #design-view button[title=delete]": "deleteClick",
    "click #design-view button[title=repeat]": "toggleRepeatable",
    "click #design-view button:contains(Preview)": "renderForm",
    "click #design-view button:contains(Show Form Output)": "formDump",
    "click #design-view button:contains(Advanced Mode)": "advancedMode",
    "click #design-view button:contains(Basic Mode)": "basicMode",
    "click #design-view button:contains(Save)": "save"
  };

  DesignView.prototype.save = function() {
    this.question.loadFromDesigner($("#questions"));
    return this.question.save(null, {
      success: function() {
        return Coconut.menuView.render();
      }
    });
  };

  DesignView.prototype.add = function(event) {
    return this.addQuestion({
      type: $(event.target).prev().val()
    });
  };

  DesignView.prototype.loadQuestion = function(questionId) {
    this.question = new Question({
      id: questionId
    });
    return this.question.fetch({
      success: (function(_this) {
        return function() {
          $('#rootQuestionName').val(_this.question.id);
          return _.each(_this.question.questions(), function(question) {
            return _this.addQuestion(question.attributes);
          });
        };
      })(this)
    });
  };

  DesignView.prototype.addQuestion = function(options) {
    var autocompleteOptions, id, label, radioOptions, repeatable, required, selectOptions, type, validation;
    if (options.questions) {
      alert("Support for editing grouped forms not yet implemented");
    }
    type = options.type;
    id = options.id || Math.ceil(Math.random() * 1000);
    label = options.label || "";
    repeatable = options.repeatable || "";
    validation = options.validation || "";
    required = options.required || "";
    selectOptions = options["select-options"] || "option1,option2";
    radioOptions = options["radio-options"] || "option1,option2";
    autocompleteOptions = options["autocomplete-options"] || "option1,option2,option3";
    if ($("#questions").children().length > 0) {
      $("#questions").append("<button class='advanced' title='group'><img src='images/group.png'/></button>");
    }
    return $("#questions").append("<div data-repeat='false' class='question-definition' id='" + id + "'> <div class='question-definition-controls'> <button class='advanced' title='repeat'><img src='images/repeat.png'></button> <input type='hidden' id=repeatable-" + id + " value='false'></input> <button title='delete'><img src='images/delete.png'></button> </div> <div>Type: " + type + "</div> <label for='label-" + id + "'>Label</label> <input type='text' name='label-" + id + "' id='label-" + id + "' value='" + label + "'></input> <label class='advanced' for='required-" + id + "'>Required</label> <input type='checkbox' class='advanced' name='required-" + id + "' id='required-" + id + "' " + (required === "false" ? "" : "checked='true'") + "></textarea> <label class='advanced' for='validation-" + id + "'>Validation</label> <textarea class='advanced' name='validation-" + id + "' id='validation-" + id + "'>" + validation + "</textarea> " + ((function() {
      switch (type) {
        case "select":
          return "<label for='select-options-" + id + "'>Select Options</label> <textarea name='select-options-" + id + "' id='select-options-" + id + "'>" + selectOptions + "</textarea>";
        case "radio":
          return "<label for='radio-options-" + id + "'>Radio Options</label> <textarea name='radio-options-" + id + "' id='radio-options-" + id + "'>" + radioOptions + "</textarea>";
        case "autocomplete from list":
          return "<label for='autocomplete-options-" + id + "'>Autocomplete Options</label> <textarea name='autocomplete-options-" + id + "' id='autocomplete-options-" + id + "'>" + autocompleteOptions + "</textarea>";
        case "autocomplete from previous entries":
          return "<input type='hidden' name='autocomplete-from-previous-entries-" + id + "' id='autocomplete-from-previous-entries-" + id + "' value='true'></input>";
        default:
          return "";
      }
    })()) + " <input type='hidden' name='type-" + id + "' id='type-" + id + "' value='" + type + "'></input> <input type='hidden' name='required-" + id + "' value='false'></input> </div>");
  };

  DesignView.prototype.groupClick = function(event) {
    var groupDiv;
    groupDiv = $(event.target).closest("button");
    this.group(groupDiv.prev(), groupDiv.next());
    return groupDiv.remove();
  };

  DesignView.prototype.group = function(group1, group2) {
    var group, i, id, len, ref;
    ref = [group1, group2];
    for (i = 0, len = ref.length; i < len; i++) {
      group = ref[i];
      if (group.attr("repeat") === "false" && group.children(".question-definition").length() > 0) {
        this.ungroup(group);
      }
    }
    id = Math.ceil(Math.random() * 1000);
    return group1.add(group2).wrapAll("<div data-repeat='false' class='question-definition' id='" + id + "'> <div class='question-definition-controls'> <button class='advanced' title='repeat'><img src='images/repeat.png'></button> <input type='hidden' id=repeatable-" + id + " value='false'></input> <button title='delete'><img src='images/delete.png'></button> <button class='advanced' title='ungroup'><img src='images/ungroup.png'></button> </div> </div>");
  };

  DesignView.prototype.ungroupClick = function(event) {
    var controls;
    controls = $(event.target).closest("button").parent();
    return this.ungroup(controls);
  };

  DesignView.prototype.ungroup = function(itemInGroup) {
    var controls, firstQuestionDefinition;
    controls = itemInGroup.parent().children(".question-definition-controls");
    firstQuestionDefinition = itemInGroup.parent().children(".question-definition").first();
    itemInGroup.unwrap();
    controls.remove();
    firstQuestionDefinition.after("<button class='advanced' title='group'><img src='images/group.png'/></button>");
    return itemInGroup;
  };

  DesignView.prototype.deleteClick = function(event) {
    return this.deleteQuestion($(event.target).closest(".question-definition"));
  };

  DesignView.prototype.deleteQuestion = function(question) {
    var surroundingQuestion;
    surroundingQuestion = question.parent(".question-definition");
    if (surroundingQuestion.children(".question-definition").length === 2) {
      this.ungroup(question);
    }
    if (question.next("button").length === 1) {
      question.next("button").remove();
    } else {
      question.prev("button").remove();
    }
    return question.remove();
  };

  DesignView.prototype.toggleRepeatable = function(event) {
    var button, hiddenRepeatableInputElement;
    button = $(event.target).closest("button");
    hiddenRepeatableInputElement = button.next();
    if (hiddenRepeatableInputElement.val() === "false") {
      button.attr("style", 'background-color:green');
      return hiddenRepeatableInputElement.val("true");
    } else {
      button.attr("style", '');
      return hiddenRepeatableInputElement.val("false");
    }
  };

  DesignView.prototype.questions = function() {
    return $('#questions').children();
  };

  DesignView.prototype.toHTMLForm = function() {
    var questionView;
    this.question.loadFromDesigner($("#questions"));
    questionView = new QuestionView({
      model: this.question
    });
    return questionView.toHTMLForm();
  };

  DesignView.prototype.dump = function() {
    return $('#dump').html(this.toJson());
  };

  DesignView.prototype.renderForm = function() {
    $('#render').html(this.toHTMLForm());
    return $('#form_output').html("<hr/> <button type='button'>Show Form Output</button><br/> <textarea id='dump' style='width:400px;height:100px'></textarea>");
  };

  DesignView.prototype.formDump = function() {
    return $('#dump').html(JSON.stringify($('form').toObject()));
  };

  DesignView.prototype.advancedMode = function() {
    $('body').removeClass("all-advanced-hidden");
    return $('button:contains(Advanced Mode)').html("Basic Mode");
  };

  DesignView.prototype.basicMode = function() {
    $('body').addClass("all-advanced-hidden");
    return $('button:contains(Basic Mode)').html("Advanced Mode");
  };

  return DesignView;

})(Backbone.View);

var QuestionView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

window.SkipTheseWhen = function(argQuestions, result) {
  var disabledClass, i, j, len, len1, question, questions, results;
  questions = [];
  argQuestions = argQuestions.split(/\s*,\s*/);
  for (i = 0, len = argQuestions.length; i < len; i++) {
    question = argQuestions[i];
    questions.push(window.questionCache[question]);
  }
  disabledClass = "disabled_skipped";
  results = [];
  for (j = 0, len1 = questions.length; j < len1; j++) {
    question = questions[j];
    if (result) {
      results.push(question.addClass(disabledClass));
    } else {
      results.push(question.removeClass(disabledClass));
    }
  }
  return results;
};

window.ResultOfQuestion = function(name) {
  var base;
  return (typeof (base = window.getValueCache)[name] === "function" ? base[name]() : void 0) || null;
};

QuestionView = (function(superClass) {
  extend(QuestionView, superClass);

  function QuestionView() {
    this.render = bind(this.render, this);
    return QuestionView.__super__.constructor.apply(this, arguments);
  }

  QuestionView.prototype.initialize = function() {
    if (Coconut.resultCollection == null) {
      Coconut.resultCollection = new ResultCollection();
    }
    return this.autoscrollTimer = 0;
  };

  QuestionView.prototype.el = '#content';

  QuestionView.prototype.triggerChangeIn = function(names) {
    var elements, i, len, name, results;
    results = [];
    for (i = 0, len = names.length; i < len; i++) {
      name = names[i];
      elements = [];
      elements.push(window.questionCache[name].find("input, select, textarea, img"));
      results.push($(elements).each((function(_this) {
        return function(index, element) {
          var event;
          event = {
            target: element
          };
          return _this.actionOnChange(event);
        };
      })(this)));
    }
    return results;
  };

  QuestionView.prototype.render = function() {
    var autocompleteElements, skipperList;
    this.$el.html("<style> .message { color: grey; font-weight: bold; padding: 10px; border: 1px yellow dotted; background: yellow; display: none; } label.radio { border-radius:20px; display:block; padding:4px 11px; border: 1px solid black; cursor: pointer; text-decoration: none; } input[type='radio']:checked + label { background-color:#ddd; background: #5393c5; background-image: -webkit-gradient(linear,left top,left bottom,from(#5393c5),to(#6facd5)); background-image: -webkit-linear-gradient(#5393c5,#6facd5); background-image: -moz-linear-gradient(#5393c5,#6facd5); background-image: -ms-linear-gradient(#5393c5,#6facd5); background-image: -o-linear-gradient(#5393c5,#6facd5); background-image: linear-gradient(#5393c5,#6facd5); } input[type='radio']{ height: 0px; } div.question.radio{ padding-top: 8px; padding-bottom: 8px; } .tt-hint{ display:none } .tt-dropdown-menu{ width: 100%; background-color: lightgray; } .tt-suggestion{ background-color: white; border-radius:20px; display:block; padding:4px 11px; border: 1px solid black; cursor: pointer; text-decoration: none; } .tt-suggestion .{ } </style> <div style='position:fixed; right:5px; color:white; padding:20px; z-index:5' id='messageText'> <a href='#help/" + this.model.id + "'>Help</a> </div> <div style='position:fixed; right:5px; color:white; background-color: #333; padding:20px; display:none; z-index:10' id='messageText'> Saving... </div> <h1>" + this.model.id + "</h1> <div id='question-view'> <form> " + (this.toHTMLForm(this.model)) + " </form> </div>");
    js2form($('form').get(0), this.result.toJSON());
    this.updateCache();
    this.updateSkipLogic();
    skipperList = [];
    $(this.model.get("questions")).each((function(_this) {
      return function(index, question) {
        if (question.actionOnChange().match(/skip/i)) {
          skipperList.push(question.safeLabel());
        }
        if ((question.get("action_on_questions_loaded") != null) && question.get("action_on_questions_loaded") !== "") {
          return CoffeeScript["eval"](question.get("action_on_questions_loaded"));
        }
      };
    })(this));
    this.triggerChangeIn(skipperList);
    this.$el.find("input[type=text],input[type=number],input[type='autocomplete from previous entries'],input[type='autocomplete from list'],input[type='autocomplete from code']").textinput();
    this.$el.find('input[type=checkbox]').checkboxradio();
    this.$el.find('ul').listview();
    this.$el.find('select').selectmenu();
    this.$el.find('a').button();
    this.$el.find('input[type=date]').datebox({
      mode: "calbox",
      dateFormat: "%d-%m-%Y"
    });
    autocompleteElements = [];
    _.each($("input[type='autocomplete from list']"), function(element) {
      element = $(element);
      element.typeahead({
        local: element.attr("data-autocomplete-options").replace(/\n|\t/, "").split(/, */)
      });
      return autocompleteElements.push(element);
    });
    _.each($("input[type='autocomplete from code']"), function(element) {
      element = $(element);
      element.typeahead({
        local: eval(element.attr("data-autocomplete-options"))
      });
      return autocompleteElements.push(element);
    });
    _.each($("input[type='autocomplete from previous entries']"), function(element) {
      element = $(element);
      element.typeahead({
        prefetch: document.location.pathname.substring(0, document.location.pathname.indexOf("index.html")) + ("_list/values/byValue?key=\"" + (element.attr("name")) + "\"")
      });
      return autocompleteElements.push(element);
    });
    _.each(autocompleteElements, (function(_this) {
      return function(autocompeteElement) {
        return autocompeteElement.blur(function() {
          return _this.autoscroll(autocompeteElement);
        });
      };
    })(this));
    if (this.readonly) {
      return $('input, textarea').attr("readonly", "true");
    }
  };

  QuestionView.prototype.events = {
    "change #question-view input": "onChange",
    "change #question-view select": "onChange",
    "change #question-view textarea": "onChange",
    "click #question-view button:contains(+)": "repeat",
    "click #question-view a:contains(Get current location)": "getLocation",
    "click .next_error": "runValidate",
    "click .validate_one": "onValidateOne"
  };

  QuestionView.prototype.runValidate = function() {
    return this.validateAll();
  };

  QuestionView.prototype.onChange = function(event) {
    var $target, eventStamp, messageVisible, targetName;
    $target = $(event.target);
    eventStamp = $target.attr("id");
    if (eventStamp === this.oldStamp && (new Date()).getTime() < this.throttleTime + 1000) {
      return;
    }
    this.throttleTime = (new Date()).getTime();
    this.oldStamp = eventStamp;
    targetName = $target.attr("name");
    if (targetName === "complete") {
      if (this.changedComplete) {
        this.changedComplete = false;
        return;
      }
      this.validateAll();
      Coconut.menuView.update();
      this.save();
      this.updateSkipLogic();
      return this.actionOnChange(event);
    } else {
      this.changedComplete = false;
      messageVisible = window.questionCache[targetName].find(".message").is(":visible");
      return _.delay((function(_this) {
        return function() {
          var wasValid;
          if (!messageVisible) {
            wasValid = _this.validateOne({
              key: targetName,
              autoscroll: false,
              button: "<button type='button' data-name='" + targetName + "' class='validate_one'>Validate</button>"
            });
            _this.save();
            _this.updateSkipLogic();
            _this.actionOnChange(event);
            if (wasValid) {
              return _this.autoscroll(event);
            }
          }
        };
      })(this), 500);
    }
  };

  QuestionView.prototype.onValidateOne = function(event) {
    var $target, name;
    $target = $(event.target);
    name = $(event.target).attr('data-name');
    return this.validateOne({
      key: name,
      autoscroll: true,
      leaveMessage: false,
      button: "<button type='button' data-name='" + name + "' class='validate_one'>Validate</button>"
    });
  };

  QuestionView.prototype.validateAll = function() {
    var i, isValid, key, len, questionIsntValid, ref;
    isValid = true;
    ref = window.keyCache;
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      questionIsntValid = !this.validateOne({
        key: key,
        autoscroll: isValid,
        leaveMessage: false
      });
      if (isValid && questionIsntValid) {
        isValid = false;
      }
    }
    this.completeButton(isValid);
    if (isValid) {
      $("[name=complete]").parent().scrollTo();
    }
    return isValid;
  };

  QuestionView.prototype.validateOne = function(options) {
    var $message, $question, autoscroll, button, e, key, leaveMessage, message;
    key = options.key || '';
    autoscroll = options.autoscroll || false;
    button = options.button || "<button type='button' class='next_error'>Next Error</button>";
    leaveMessage = options.leaveMessage || false;
    $question = window.questionCache[key];
    $message = $question.find(".message");
    try {
      message = this.isValid(key);
    } catch (_error) {
      e = _error;
      alert("isValid error in " + key + "\n" + e);
      message = "";
    }
    if ($message.is(":visible") && leaveMessage) {
      if (message === "") {
        return true;
      } else {
        return false;
      }
    }
    if (message === "") {
      $message.hide();
      if (autoscroll) {
        this.autoscroll($question);
      }
      return true;
    } else {
      $message.show().html(message + " " + button).find("button").button();
      this.scrollToQuestion($question);
      return false;
    }
  };

  QuestionView.prototype.isValid = function(question_id) {
    var error, labelText, question, questionWrapper, ref, required, result, type, validation, validationFunctionResult, value;
    if (!question_id) {
      return;
    }
    result = [];
    questionWrapper = window.questionCache[question_id];
    if (questionWrapper.hasClass("label")) {
      return "";
    }
    question = $("[name=" + question_id + "]", questionWrapper);
    type = $(questionWrapper.find("input").get(0)).attr("type");
    labelText = type === "radio" ? $("label[for=" + (question.attr("id").split("-")[0]) + "]", questionWrapper).text() || "" : (ref = $("label[for=" + (question.attr("id")) + "]", questionWrapper)) != null ? ref.text() : void 0;
    required = questionWrapper.attr("data-required") === "true";
    validation = unescape(questionWrapper.attr("data-validation"));
    if (validation === "undefined") {
      validation = null;
    }
    value = window.getValueCache[question_id]();
    if (!questionWrapper.is(":visible")) {
      return "";
    }
    if (question.find("input").length !== 0 && (type === "checkbox" || type === "radio")) {
      return "";
    }
    if (question_id !== "Location") {
      if (required && (value === "" || value === null)) {
        result.push("'" + labelText + "' is required.");
      }
    }
    if ((validation != null) && validation !== "") {
      try {
        validationFunctionResult = (CoffeeScript["eval"]("(value) -> " + validation, {
          bare: true
        }))(value);
        if (validationFunctionResult != null) {
          result.push(validationFunctionResult);
        }
      } catch (_error) {
        error = _error;
        if (error === 'invisible reference') {
          return '';
        }
        alert("Validation error for " + question_id + " with value " + value + ": " + error);
      }
    }
    if (result.length !== 0) {
      return result.join("<br>") + "<br>";
    }
    return "";
  };

  QuestionView.prototype.scrollToQuestion = function(question) {
    return this.autoscroll($(question).prev());
  };

  QuestionView.prototype.autoscroll = function(event) {
    var $div, $target, safetyCounter;
    clearTimeout(this.autoscrollTimer);
    if (event.jquery) {
      $div = event;
      window.scrollTargetName = $div.attr("data-question-name") || $div.attr("name");
    } else {
      $target = $(event.target);
      window.scrollTargetName = $target.attr("name");
      $div = window.questionCache[window.scrollTargetName];
    }
    this.$next = $div.next();
    if (!this.$next.is(":visible") && this.$next.length > 0) {
      safetyCounter = 0;
      while (!this.$next.is(":visible") && (safetyCounter += 1) < 100) {
        this.$next = this.$next.next();
      }
    }
    if (this.$next.is(":visible")) {
      if (window.questionCache[window.scrollTargetName].find(".message").is(":visible")) {
        return;
      }
      $(window).on("scroll", (function(_this) {
        return function() {
          $(window).off("scroll");
          return clearTimeout(_this.autoscrollTimer);
        };
      })(this));
      return this.autoscrollTimer = setTimeout((function(_this) {
        return function() {
          $(window).off("scroll");
          return _this.$next.scrollTo().find("input[type=text],input[type=number]").focus();
        };
      })(this), 1000);
    }
  };

  QuestionView.prototype.actionOnChange = function(event) {
    var $divQuestion, $target, code, error, message, name, newFunction, nodeName, value;
    nodeName = $(event.target).get(0).nodeName;
    $target = nodeName === "INPUT" || nodeName === "SELECT" || nodeName === "TEXTAREA" ? $(event.target) : $(event.target).parent().parent().parent().find("input,textarea,select");
    if (!$target.is(":visible")) {
      return;
    }
    name = $target.attr("name");
    $divQuestion = $(".question [data-question-name=" + name + "]");
    code = $divQuestion.attr("data-action_on_change");
    try {
      value = ResultOfQuestion(name);
    } catch (_error) {
      error = _error;
      if (error === "invisible reference") {
        return;
      }
    }
    if (code === "" || (code == null)) {
      return;
    }
    code = "(value) -> " + code;
    try {
      newFunction = CoffeeScript["eval"].apply(this, [code]);
      return newFunction(value);
    } catch (_error) {
      error = _error;
      name = (/function (.{1,})\(/.exec(error.constructor.toString())[1]);
      message = error.message;
      return alert("Action on change error in question " + ($divQuestion.attr('data-question-id') || $divQuestion.attr("id")) + "\n\n" + name + "\n\n" + message);
    }
  };

  QuestionView.prototype.updateSkipLogic = function() {
    var $question, error, message, name, ref, result, results, skipLogicCode;
    ref = window.questionCache;
    results = [];
    for (name in ref) {
      $question = ref[name];
      skipLogicCode = window.skipLogicCache[name];
      if (skipLogicCode === "" || (skipLogicCode == null)) {
        continue;
      }
      try {
        result = eval(skipLogicCode);
      } catch (_error) {
        error = _error;
        if (error === "invisible reference") {
          result = true;
        } else {
          name = (/function (.{1,})\(/.exec(error.constructor.toString())[1]);
          message = error.message;
          alert("Skip logic error in question " + ($question.attr('data-question-id')) + "\n\n" + name + "\n\n" + message);
        }
      }
      if (result) {
        results.push($question[0].style.display = "none");
      } else {
        results.push($question[0].style.display = "");
      }
    }
    return results;
  };

  QuestionView.prototype.save = _.throttle(function() {
    var currentData;
    currentData = $('form').toObject({
      skipEmpty: false
    });
    currentData.lastModifiedAt = moment(new Date()).format(Coconut.config.get("datetime_format"));
    currentData.savedBy = $.cookie('current_user');
    return this.result.save(currentData, {
      success: (function(_this) {
        return function(model) {
          $("#messageText").slideDown().fadeOut();
          Coconut.router.navigate("edit/result/" + model.id, false);
          return Coconut.menuView.update();
        };
      })(this)
    });
  }, 1000);

  QuestionView.prototype.completeButton = function(value) {
    this.changedComplete = true;
    if ($('[name=complete]').prop("checked") !== value) {
      return $('[name=complete]').click();
    }
  };

  QuestionView.prototype.toHTMLForm = function(questions, groupId) {
    if (questions == null) {
      questions = this.model;
    }
    window.skipLogicCache = {};
    if (questions.length == null) {
      questions = [questions];
    }
    return _.map(questions, (function(_this) {
      return function(question) {
        var html, index, name, newGroupId, option, options, question_id, repeatable;
        if (question.repeatable() === "true") {
          repeatable = "<button>+</button>";
        } else {
          repeatable = "";
        }
        if ((question.type() != null) && (question.label() != null) && question.label() !== "") {
          name = question.safeLabel();
          window.skipLogicCache[name] = question.skipLogic() !== '' ? CoffeeScript.compile(question.skipLogic(), {
            bare: true
          }) : '';
          question_id = question.get("id");
          if (question.repeatable() === "true") {
            name = name + "[0]";
            question_id = question.get("id") + "-0";
          }
          if (groupId != null) {
            name = "group." + groupId + "." + name;
          }
          return "<div " + (question.validation() ? question.validation() ? "data-validation = '" + (escape(question.validation())) + "'" : void 0 : "") + " data-required='" + (question.required()) + "' class='question " + ((typeof question.type === "function" ? question.type() : void 0) || '') + "' data-question-name='" + name + "' data-question-id='" + question_id + "' data-action_on_change='" + (_.escape(question.actionOnChange())) + "' > " + (!~question.type().indexOf('hidden') ? "<label type='" + (question.type()) + "' for='" + question_id + "'>" + (question.label()) + " <span></span></label>" : void 0) + " <div class='message'></div> " + ((function() {
            var i, len, ref;
            switch (question.type()) {
              case "textarea":
                return "<input name='" + name + "' type='text' id='" + question_id + "' value='" + (_.escape(question.value())) + "'></input>";
              case "select":
                if (this.readonly) {
                  return question.value();
                } else {
                  html = "<select>";
                  ref = question.get("select-options").split(/, */);
                  for (index = i = 0, len = ref.length; i < len; index = ++i) {
                    option = ref[index];
                    html += "<option name='" + name + "' id='" + question_id + "-" + index + "' value='" + option + "'>" + option + "</option>";
                  }
                  return html += "</select>";
                }
                break;
              case "radio":
                if (this.readonly) {
                  return "<input class='radioradio' name='" + name + "' type='text' id='" + question_id + "' value='" + (question.value()) + "'></input>";
                } else {
                  options = question.get("radio-options");
                  return _.map(options.split(/, */), function(option, index) {
                    return "<input class='radio' type='radio' name='" + name + "' id='" + question_id + "-" + index + "' value='" + (_.escape(option)) + "'/> <label class='radio' for='" + question_id + "-" + index + "'>" + option + "</label> <!-- <div class='ui-radio'> <label for=''" + question_id + "-" + index + "' data-corners='true' data-shadow='false' data-iconshadow='true' data-wrapperels='span' data-icon='radio-off' data-theme='c' class='ui-btn ui-btn-corner-all ui-btn-icon-left ui-radio-off ui-btn-up-c'> <span class='ui-btn-inner ui-btn-corner-all'> <span class='ui-btn-text'>" + option + "</span> <span class='ui-icon ui-icon-radio-off ui-icon-shadow'>&nbsp;</span> </span> </label> <input type='radio' name='" + name + "' id='" + question_id + "-" + index + "' value='" + (_.escape(option)) + "'/> </div> -->";
                  }).join("");
                }
                break;
              case "checkbox":
                if (this.readonly) {
                  return "<input name='" + name + "' type='text' id='" + question_id + "' value='" + (_.escape(question.value())) + "'></input>";
                } else {
                  return "<input style='display:none' name='" + name + "' id='" + question_id + "' type='checkbox' value='true'></input>";
                }
                break;
              case "autocomplete from list":
              case "autocomplete from previous entries":
              case "autocomplete from code":
                return "<!-- autocomplete='off' disables browser completion --> <input autocomplete='off' name='" + name + "' id='" + question_id + "' type='" + (question.type()) + "' value='" + (question.value()) + "' data-autocomplete-options='" + (question.get("autocomplete-options")) + "'></input> <ul id='" + question_id + "-suggestions' data-role='listview' data-inset='true'/>";
              case "location":
                this.watchID = navigator.geolocation.getAccurateCurrentPosition(function() {}, function() {}, function() {}, {
                  desiredAccuracy: 50,
                  maxWait: 60 * 5 * 1000
                });
                return "<a data-question-id='" + question_id + "'>Get current location</a> <label for='" + question_id + "-description'>Location Description</label> <input type='text' name='" + name + "-description' id='" + question_id + "-description'></input> " + (_.map(["latitude", "longitude", "accuracy"], function(field) {
                  return "<label for='" + question_id + "-" + field + "'>" + field + "</label><input readonly='readonly' type='number' name='" + name + "-" + field + "' id='" + question_id + "-" + field + "'></input>";
                }).join("")) + " " + (_.map(["altitude", "altitudeAccuracy", "heading", "timestamp"], function(field) {
                  return "<input type='hidden' name='" + name + "-" + field + "' id='" + question_id + "-" + field + "'></input>";
                }).join(""));
              case "image":
                return "<img style='" + (question.get("image-style")) + "' src='" + (question.get("image-path")) + "'/>";
              case "label":
                return "";
              default:
                return "<input name='" + name + "' id='" + question_id + "' type='" + (question.type()) + "' value='" + (question.value()) + "'></input>";
            }
          }).call(_this)) + " </div> " + repeatable;
        } else {
          newGroupId = question_id;
          if (question.repeatable()) {
            newGroupId = newGroupId + "[0]";
          }
          return ("<div data-group-id='" + question_id + "' class='question group'>") + _this.toHTMLForm(question.questions(), newGroupId) + "</div>" + repeatable;
        }
      };
    })(this)).join("");
  };

  QuestionView.prototype.updateCache = function() {
    var $qC, accessorFunction, i, inputs, len, name, question, ref, selects, type;
    window.questionCache = {};
    window.getValueCache = {};
    window.$questions = $(".question");
    ref = window.$questions;
    for (i = 0, len = ref.length; i < len; i++) {
      question = ref[i];
      name = question.getAttribute("data-question-name");
      if ((name != null) && name !== "") {
        accessorFunction = {};
        window.questionCache[name] = $(question);
        $qC = window.questionCache[name];
        selects = $("select[name=" + name + "]", $qC);
        if (selects.length === 0) {
          inputs = $("input[name=" + name + "]", $qC);
          if (inputs.length !== 0) {
            type = inputs[0].getAttribute("type");
            if (type === "radio") {
              (function(name, $qC) {
                return accessorFunction = function() {
                  return $("input:checked", $qC).safeVal();
                };
              })(name, $qC);
            } else if (type === "checkbox") {
              (function(name, $qC) {
                return accessorFunction = function() {
                  return $("input", $qC).map(function() {
                    return $(this).safeVal();
                  });
                };
              })(name, $qC);
            } else {
              (function(inputs) {
                return accessorFunction = function() {
                  return inputs.safeVal();
                };
              })(inputs);
            }
          } else {
            (function(name, $qC) {
              return accessorFunction = function() {
                return $(".textarea[name=" + name + "]", $qC).safeVal();
              };
            })(name, $qC);
          }
        } else {
          (function(selects) {
            return accessorFunction = function() {
              return selects.safeVal();
            };
          })(selects);
        }
        window.getValueCache[name] = accessorFunction;
      }
    }
    return window.keyCache = _.keys(questionCache);
  };

  QuestionView.prototype.repeat = function(event) {
    var button, i, inputElement, len, name, newIndex, newQuestion, questionID, re, ref;
    button = $(event.target);
    newQuestion = button.prev(".question").clone();
    questionID = newQuestion.attr("data-group-id");
    if (questionID == null) {
      questionID = "";
    }
    ref = newQuestion.find("input");
    for (i = 0, len = ref.length; i < len; i++) {
      inputElement = ref[i];
      inputElement = $(inputElement);
      name = inputElement.attr("name");
      re = new RegExp(questionID + "\\[(\\d)\\]");
      newIndex = parseInt(_.last(name.match(re))) + 1;
      inputElement.attr("name", name.replace(re, questionID + "[" + newIndex + "]"));
    }
    button.after(newQuestion.add(button.clone()));
    return button.remove();
  };

  QuestionView.prototype.getLocation = function(event) {
    var maxWait, onError, onProgress, onSuccess, question_id, requiredAccuracy, updateFormWithCoordinates;
    requiredAccuracy = 200;
    maxWait = 3 * 60 * 1000;
    question_id = $(event.target).closest("[data-question-id]").attr("data-question-id");
    $("#" + question_id + "-description").val("Retrieving position, please wait.");
    updateFormWithCoordinates = function(geoposition) {
      _.each(geoposition.coords, function(value, key) {
        return $("#" + question_id + "-" + key).val(value);
      });
      $("#" + question_id + "-timestamp").val(moment(geoposition.timestamp).format(Coconut.config.get("datetime_format")));
      return $.getJSON("http://api.geonames.org/findNearbyPlaceNameJSON?lat=" + geoposition.coords.latitude + "&lng=" + geoposition.coords.longitude + "&username=mikeymckay&callback=?", null, (function(_this) {
        return function(result) {
          return $("#" + question_id + "-description").val(parseFloat(result.geonames[0].distance).toFixed(1) + " km from center of " + result.geonames[0].name);
        };
      })(this));
    };
    onSuccess = (function(_this) {
      return function(geoposition) {
        $("label[type=location]").html("Household Location");
        updateFormWithCoordinates(geoposition);
        $("#" + question_id + "-description").val("Success");
        return _this.save();
      };
    })(this);
    onError = function(error) {
      return $("#" + question_id + "-description").val("Error: " + (JSON.stringify(error)));
    };
    onProgress = (function(_this) {
      return function(geoposition) {
        updateFormWithCoordinates(geoposition);
        return $("label[type=location]").html("Household Location<div style='background-color:yellow'>Current accuracy is " + geoposition.coords.accuracy + " meters - must be less than " + requiredAccuracy + " meters. Make sure there are no trees or buildings blocking view to the sky.</div>");
      };
    })(this);
    navigator.geolocation.clearWatch(this.watchID);
    return navigator.geolocation.getAccurateCurrentPosition(onSuccess, onError, onProgress, {
      desiredAccuracy: requiredAccuracy,
      maxWait: maxWait
    });
  };

  return QuestionView;

})(Backbone.View);

(function($) {
  $.fn.scrollTo = function(speed, callback) {
    var e;
    if (speed == null) {
      speed = 500;
    }
    try {
      $('html, body').animate({
        scrollTop: $(this).offset().top + 'px'
      }, speed, null, callback);
    } catch (_error) {
      e = _error;
      console.log("error", e);
      console.log("Scroll error with 'this'", this);
    }
    return this;
  };
  return $.fn.safeVal = function() {
    if (this.is(":visible") || this.parents(".question").filter(function() {
      return !$(this).hasClass("group");
    }).is(":visible")) {
      return $.trim(this.val() || '');
    } else {
      return null;
    }
  };
})($);

var MenuView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MenuView = (function(superClass) {
  extend(MenuView, superClass);

  function MenuView() {
    this.render = bind(this.render, this);
    return MenuView.__super__.constructor.apply(this, arguments);
  }

  MenuView.prototype.el = '.question-buttons';

  MenuView.prototype.events = {
    "change": "render"
  };

  MenuView.prototype.render = function() {
    this.$el.html("<div id='navbar' data-role='navbar'> <ul></ul> </div>");
    return Coconut.questions.fetch({
      success: (function(_this) {
        return function() {
          _this.$el.find("ul").html(Coconut.questions.map(function(question, index) {
            return "<li><a id='menu-" + index + "' href='#show/results/" + (escape(question.id)) + "'><h2>" + question.id + "<div id='menu-partial-amount'></div></h2></a></li>";
          }).join(" "));
          $(".question-buttons").navbar();
          return _this.update();
        };
      })(this)
    });
  };

  MenuView.prototype.update = function() {
    Coconut.questions.each((function(_this) {
      return function(question, index) {
        var results;
        results = new ResultCollection();
        return results.fetch({
          include_docs: false,
          question: question.id,
          isComplete: false,
          success: function() {
            return $("#menu-" + index + " #menu-partial-amount").html(results.length);
          }
        });
      };
    })(this));
    return $.ajax("app/version", {
      success: function(result) {
        return $("#version").html(result);
      },
      error: $("#version").html("-")
    });
  };

  return MenuView;

})(Backbone.View);

var ResultsView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultsView = (function(superClass) {
  extend(ResultsView, superClass);

  function ResultsView() {
    this.render = bind(this.render, this);
    return ResultsView.__super__.constructor.apply(this, arguments);
  }

  ResultsView.prototype.initialize = function() {
    return this.question = new Question();
  };

  ResultsView.prototype.el = '#content';

  ResultsView.prototype.render = function() {
    this.$el.html(("<style> table.results th.header, table.results td{ font-size:150%; } </style> <div class='not-complete' data-collapsed='false' data-role='collapsible'> <h2>'" + this.question.id + "' Items Not Completed (<span class='count-complete-false'></span>)</h2> <table class='results complete-false tablesorter'> <thead><tr>") + _.map(this.question.summaryFieldNames(), function(summaryField) {
      return "<th class='header'>" + summaryField + "</th>";
    }).join("") + ("<th></th> </tr></thead> <tbody> </tbody> </table> <a href='#new/result/" + (escape(this.question.id)) + "'>Add new '" + this.question.id + "'</a> </div> <div class='complete' data-role='collapsible'> <h2>'" + this.question.id + "' Items Completed (<span class='count-complete-true'></span>)</h2> <table class='results complete-true tablesorter'> <thead><tr>") + _.map(this.question.summaryFieldNames(), function(summaryField) {
      return "<th class='header'>" + summaryField + "</th>";
    }).join("") + "<th></th> </tr></thead> <tbody> </tbody> </table> </div>");
    $("a").button();
    $('table').tablesorter();
    $('table').addTableFilter({
      labelText: null
    });
    $("input[type=search]").textinput();
    $('[data-role=collapsible]').collapsible();
    this.loadIncompleteResults();
    $('.complete').bind("expand", (function(_this) {
      return function() {
        if (!($('.complete tr td').length > 0)) {
          return _this.loadCompleteResults();
        }
      };
    })(this));
    return this.updateCountComplete();
  };

  ResultsView.prototype.updateCountComplete = function() {
    var results;
    results = new ResultCollection();
    return results.fetch({
      include_docs: false,
      question: this.question.id,
      isComplete: true,
      success: (function(_this) {
        return function() {
          return $(".count-complete-true").html(results.length);
        };
      })(this)
    });
  };

  ResultsView.prototype.loadIncompleteResults = function() {
    return this.loadResults(false);
  };

  ResultsView.prototype.loadCompleteResults = function() {
    return this.loadResults(true);
  };

  ResultsView.prototype.loadResults = function(complete) {
    var results;
    results = new ResultCollection();
    return results.fetch({
      include_docs: true,
      question: this.question.id,
      isComplete: complete,
      success: (function(_this) {
        return function() {
          $(".count-complete-" + complete).html(results.length);
          return results.each(function(result, index) {
            $("table.complete-" + complete + " tbody").append("<tr> " + (_.map(result.summaryValues(_this.question), function(value) {
              return "<td><a href='#edit/result/" + result.id + "'>" + value + "</a></td>";
            }).join("")) + " <td><a href='#delete/result/" + result.id + "' data-icon='delete' data-iconpos='notext'>Delete</a></td> </tr>");
            if (index + 1 === results.length) {
              $("table a").button();
              $("table").trigger("update");
            }
            return _.each($('table tr'), function(row, index) {
              if (index % 2 === 1) {
                return $(row).addClass("odd");
              }
            });
          });
        };
      })(this)
    });
  };

  return ResultsView;

})(Backbone.View);

var ResultSummaryEditorView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultSummaryEditorView = (function(superClass) {
  extend(ResultSummaryEditorView, superClass);

  function ResultSummaryEditorView() {
    this.render = bind(this.render, this);
    return ResultSummaryEditorView.__super__.constructor.apply(this, arguments);
  }

  ResultSummaryEditorView.prototype.initialize = function() {};

  ResultSummaryEditorView.prototype.el = $('#content');

  ResultSummaryEditorView.prototype.events = {
    "submit #resultSummaryEditor form": "save"
  };

  ResultSummaryEditorView.prototype.save = function() {
    this.question.set({
      resultSummaryFields: $('form').toObject()
    });
    this.question.save();
    return false;
  };

  ResultSummaryEditorView.prototype.render = function() {
    var result;
    result = "<div id='resultSummaryEditor'> Check the boxes to use for summarizing results for <b>" + this.question.id + "</b>:<br/> <form> <ul>";
    _.each(this.question.questions(), function(question, index) {
      return result += "<li> <input id='result-summary-option-" + index + "' name='" + (question.label()) + "' type='checkbox'></input> <label for='result-summary-option-" + index + "'>" + (question.label()) + "</label> </li>";
    });
    result += "</ul> <input type='submit' value='Save'></input> </form> </div>";
    this.$el.html(result);
    console.log(this.question);
    return js2form($('form').get(0), this.question.resultSummaryFields());
  };

  return ResultSummaryEditorView;

})(Backbone.View);

var SyncView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SyncView = (function(superClass) {
  extend(SyncView, superClass);

  function SyncView() {
    this.update = bind(this.update, this);
    this.render = bind(this.render, this);
    return SyncView.__super__.constructor.apply(this, arguments);
  }

  SyncView.prototype.initialize = function() {
    return this.sync = new Sync();
  };

  SyncView.prototype.el = '#content';

  SyncView.prototype.render = function() {
    this.$el.html("<h2>Cloud Server: <span class='sync-target'>" + (this.sync.target()) + "</span></h2> <a href='#sync/send'>Send data (last done: <span class='sync-sent-status'></span>)</a> <a href='#sync/get'>Get data (last done: <span class='sync-get-status'></span>)</a>");
    $("a").button();
    return this.update();
  };

  SyncView.prototype.update = function() {
    return this.sync.fetch({
      success: (function(_this) {
        return function() {
          $(".sync-sent-status").html(_this.sync.was_last_send_successful() ? _this.sync.last_send_time() : (_this.sync.last_send_time()) + " - last attempt FAILED");
          return $(".sync-get-status").html(_this.sync.was_last_get_successful() ? _this.sync.last_get_time() : (_this.sync.last_get_time()) + " - last attempt FAILED");
        };
      })(this),
      error: (function(_this) {
        return function() {
          console.log("synclog doesn't exist yet, create it and re-render");
          _this.sync.save();
          return _.delay(_this.update, 1000);
        };
      })(this)
    });
  };

  return SyncView;

})(Backbone.View);

var ManageView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ManageView = (function(superClass) {
  extend(ManageView, superClass);

  function ManageView() {
    this.render = bind(this.render, this);
    return ManageView.__super__.constructor.apply(this, arguments);
  }

  ManageView.prototype.el = '#content';

  ManageView.prototype.render = function() {
    this.$el.html("<a href='#sync'>Sync</a> <a href='#configure'>Set cloud vs mobile</a> <a href='#users'>Manage users</a> <a href='#messaging'>Send message to users</a> <h2>Question Sets</h2> <a href='#design'>New</a> <table> <thead> <th></th> <th></th> <th></th> <th></th> </thead> <tbody> </tbody> </table>");
    $("a").button();
    return Coconut.questions.fetch({
      success: function() {
        Coconut.questions.each(function(question) {
          var questionId, questionName;
          questionName = question.id;
          questionId = escape(question.id);
          return $("tbody").append("<tr> <td>" + questionName + "</td> <td><a href='#edit/" + questionId + "'>edit</a></td> <td><a href='#delete/" + questionId + "'>delete</a></td> <td><a href='#edit/resultSummary/" + questionId + "'>summary</a></td> </tr>");
        });
        return $("table a").button();
      }
    });
  };

  return ManageView;

})(Backbone.View);

var LocalConfigView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LocalConfigView = (function(superClass) {
  extend(LocalConfigView, superClass);

  function LocalConfigView() {
    return LocalConfigView.__super__.constructor.apply(this, arguments);
  }

  LocalConfigView.prototype.el = '#content';

  LocalConfigView.prototype.render = function() {
    var ref;
    this.$el.html("<form id='local-config'> <h1>Configure your Coconut system</h1> <label>Coconut Cloud URL</label> <input type='text' name='coconut-cloud' value='http://'></input> <fieldset id='mode-fieldset'> <legend>Mode</legend> <label for='cloud'>Cloud (reporting system)</label> <input id='cloud' name='mode' type='radio' value='cloud'></input> <label for='mobile'>Mobile (data collection, probably on a tablet)</label> <input id='mobile' name='mode' type='radio' value='mobile'></input> </fieldset> <button>Save</button> <div id='message'></div> </form>");
    if (Coconut.config.get("mode") == null) {
      $("#mode-fieldset").hide();
      $("#mobile").prop("checked", true);
    }
    this.$el.find('input[type=radio],input[type=checkbox]').checkboxradio();
    this.$el.find('button').button();
    this.$el.find('input[type=text]').textinput();
    return (ref = Coconut.config.local) != null ? ref.fetch({
      success: function() {
        return js2form($('#local-config').get(0), Coconut.config.local.toJSON());
      },
      error: function() {
        return $('#message').html("Complete the fields before continuing");
      }
    }) : void 0;
  };

  LocalConfigView.prototype.events = {
    "click #local-config button": "save"
  };

  LocalConfigView.prototype.save = function() {
    var coconutCloud, coconutCloudConfigURL, localConfig;
    localConfig = $('#local-config').toObject();
    coconutCloud = $("input[name=coconut-cloud]").val();
    coconutCloudConfigURL = coconutCloud + "/coconut.config";
    if (localConfig.mode && (coconutCloud != null)) {
      $('#message').html("Downloading configuration file from " + coconutCloudConfigURL + "<br/>");
      $.ajax({
        url: coconutCloudConfigURL,
        dataType: "jsonp",
        success: function(cloudConfig) {
          $('#message').append("Saving configuration file<br/>");
          delete cloudConfig["_rev"];
          return Coconut.config.save(cloudConfig, {
            success: function() {
              $('#message').append("Creating local configuration file<br/>");
              localConfig = new LocalConfig();
              return localConfig.fetch({
                complete: function() {
                  return localConfig.save(localConfig, {
                    success: function() {
                      var sync;
                      $('#message').append("Local configuration file saved<br/>");
                      sync = new Sync();
                      return sync.save(null, {
                        success: function() {
                          $('#message').append("Updating application<br/>");
                          return sync.getFromCloud({
                            success: function() {
                              Coconut.router.navigate("", false);
                              return location.reload();
                            }
                          });
                        }
                      });
                    }
                  });
                }
              });
            }
          });
        },
        error: function(error) {
          return console.log("Couldn't find config file at " + coconutCloudConfigURL);
        }
      });
      return false;
    } else {
      $('#message').html("Fields incomplete");
      return false;
    }
  };

  return LocalConfigView;

})(Backbone.View);

var ReportView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ReportView = (function(superClass) {
  extend(ReportView, superClass);

  function ReportView() {
    this.spreadsheet = bind(this.spreadsheet, this);
    this.render = bind(this.render, this);
    this.update = bind(this.update, this);
    return ReportView.__super__.constructor.apply(this, arguments);
  }

  ReportView.prototype.el = '#content';

  ReportView.prototype.events = {
    "change #reportOptions": "update",
    "change #summaryField": "summarize",
    "change #aggregateBy": "update",
    "click #toggleDisaggregation": "toggleDisaggregation"
  };

  ReportView.prototype.update = function() {
    var reportOptions, url;
    reportOptions = {
      startDate: $('#start').val(),
      endDate: $('#end').val(),
      reportType: $('#report-type :selected').text(),
      question: $('#selected-question :selected').text(),
      aggregateBy: $("#aggregateBy :selected").text()
    };
    _.each(this.locationTypes, function(location) {
      return reportOptions[location] = $("#" + location + " :selected").text();
    });
    url = "reports/" + _.map(reportOptions, function(value, key) {
      return key + "/" + (escape(value));
    }).join("/");
    return Coconut.router.navigate(url, true);
  };

  ReportView.prototype.render = function(options) {
    this.reportType = options.reportType || "results";
    this.startDate = options.startDate || moment(new Date).subtract('days', 14).format("YYYY-MM-DD");
    this.endDate = options.endDate || moment(new Date).format("YYYY-MM-DD");
    this.question = unescape(options.question);
    this.aggregateBy = options.aggregateBy;
    this.$el.html("<style> table.results th.header, table.results td{ font-size:150%; } </style> <table id='reportOptions'></table> <div id='report'></div>");
    return Coconut.questions.fetch({
      success: (function(_this) {
        return function() {
          $("#reportOptions").append(_this.formFilterTemplate({
            id: "question",
            label: "Question",
            form: "<select id='selected-question'> " + (Coconut.questions.map(function(question) {
              return "<option " + (question.label() === _this.question ? "selected='true'" : "") + ">" + (question.label()) + "</option>";
            }).join("")) + " </select>"
          }));
          $("#reportOptions").append(_this.formFilterTemplate({
            id: "start",
            label: "Start Date",
            form: "<input id='start' type='date' value='" + _this.startDate + "'/>"
          }));
          $("#reportOptions").append(_this.formFilterTemplate({
            id: "end",
            label: "End Date",
            form: "<input id='end' type='date' value='" + _this.endDate + "'/>"
          }));
          $("#reportOptions").append(_this.formFilterTemplate({
            id: "report-type",
            label: "Report Type",
            form: "<select id='report-type'> " + (_.map(["results", "spreadsheet", "pivotTable", "summarytables"], function(type) {
              return "<option " + (type === _this.reportType ? "selected='true'" : void 0) + ">" + type + "</option>";
            }).join("")) + " </select>"
          }));
          _this[_this.reportType]();
          $('div[data-role=fieldcontain]').fieldcontain();
          $('select').selectmenu();
          return $('input[type=date]').datebox({
            mode: "calbox"
          });
        };
      })(this)
    });
  };

  ReportView.prototype.mostSpecificLocationSelected = function() {
    var mostSpecificLocationType, mostSpecificLocationValue;
    mostSpecificLocationType = "region";
    mostSpecificLocationValue = "ALL";
    _.each(this.locationTypes, function(locationType) {
      if (this[locationType] !== "ALL") {
        mostSpecificLocationType = locationType;
        return mostSpecificLocationValue = this[locationType];
      }
    });
    return {
      type: mostSpecificLocationType,
      name: mostSpecificLocationValue
    };
  };

  ReportView.prototype.formFilterTemplate = function(options) {
    return "<tr> <td> <label style='display:inline' for='" + options.id + "'>" + options.label + "</label> </td> <td style='width:150%'> " + options.form + " </select> </td> </tr>";
  };

  ReportView.prototype.viewQuery = function(options) {
    var results;
    results = new ResultCollection();
    return results.fetch({
      question: $('#selected-question').val(),
      isComplete: true,
      include_docs: true,
      success: function() {
        results.fields = {};
        results.each(function(result) {
          return _.each(_.keys(result.attributes), function(key) {
            if (!_.contains(["_id", "_rev", "question"], key)) {
              return results.fields[key] = true;
            }
          });
        });
        results.fields = _.keys(results.fields);
        return options.success(results);
      }
    });
  };

  ReportView.prototype.spreadsheet = function() {
    var endkey;
    $("#report").html("<table id='reportTable'> <thead> <tr/> </thead> <tbody> </tbody> </table>");
    if (this.endDate) {
      endkey = moment(this.endDate).endOf("day").format("YYYY-MM-DD HH:mm:ss");
    }
    return $.couch.db(Coconut.config.database_name()).view((Coconut.config.design_doc_name()) + "/results", {
      startkey: [this.question, this.startDate || null],
      endkey: [this.question, endkey || {}],
      include_docs: true,
      error: (function(_this) {
        return function(error) {
          return console.log(JSON.stringify(error));
        };
      })(this),
      success: (function(_this) {
        return function(results) {
          var fields;
          results = results.rows;
          fields = {};
          _(results).each(function(result) {
            return _(_(result.doc).keys()).each(function(key) {
              return fields[key] = true;
            });
          });
          fields = _(fields).keys();
          $("#reportTable thead tr").html(_(fields).map(function(field) {
            return "<th>" + field + "</th>";
          }).join(""));
          $("#reportTable tbody").html(_(results).map(function(result) {
            return "<tr> " + (_(fields).map(function(field) {
              return "<td>" + (result.doc[field] || "-") + "</td>";
            }).join("")) + " </tr>";
          }).join(""));
          $("#report").css("overflow", "scroll");
          return $("#reportTable").dataTable({
            aaSorting: [[0, "desc"]],
            iDisplayLength: 25,
            dom: 'T<"clear">lfrtip',
            tableTools: {
              sSwfPath: "js-libraries/copy_csv_xls_pdf.swf"
            }
          });
        };
      })(this)
    });
  };

  ReportView.prototype.pivotTable = function() {
    var endkey;
    if (this.endDate) {
      endkey = moment(this.endDate).endOf("day").format("YYYY-MM-DD HH:mm:ss");
    }
    return $.couch.db(Coconut.config.database_name()).view((Coconut.config.design_doc_name()) + "/results", {
      startkey: [this.question, this.startDate || null],
      endkey: [this.question, endkey || {}],
      include_docs: true,
      error: (function(_this) {
        return function(error) {
          return console.log(JSON.stringify(error));
        };
      })(this),
      success: (function(_this) {
        return function(results) {
          return console.log(_(results.rows).pluck("doc", $("#report").pivotUI(_(results.rows).pluck("doc"), {
            renderers: $.extend($.pivotUtilities.renderers, $.pivotUtilities.gchart_renderers, $.pivotUtilities.d3_renderers)
          })));
        };
      })(this)
    });
  };

  ReportView.prototype.results = function() {
    var endkey;
    if (this.endDate) {
      endkey = moment(this.endDate).endOf("day").format("YYYY-MM-DD HH:mm:ss");
    }
    return $.couch.db(Coconut.config.database_name()).view((Coconut.config.design_doc_name()) + "/results", {
      startkey: [this.question, this.startDate || null],
      endkey: [this.question, endkey || {}],
      include_docs: true,
      error: (function(_this) {
        return function(error) {
          return console.log(JSON.stringify(error));
        };
      })(this),
      success: (function(_this) {
        return function(results) {
          return _this.$el.append("<h2>" + _this.question + ": " + results.rows.length + " results for " + _this.startDate + " - " + _this.endDate + "</h2> Select another report type above for further analysis");
        };
      })(this)
    });
  };

  ReportView.prototype.summarytables = function() {
    return Coconut.resultCollection.fetch({
      includeData: true,
      success: (function(_this) {
        return function() {
          var fields;
          fields = _.chain(Coconut.resultCollection.toJSON()).map(function(result) {
            return _.keys(result);
          }).flatten().uniq().sort().value();
          fields = _.without(fields, "_id", "_rev");
          _this.$el.append("<br/> Choose a field to summarize:<br/> <select id='summaryField'> " + (_.map(fields, function(field) {
            return "<option id='" + field + "'>" + field + "</option>";
          }).join("")) + " </select>");
          return $('select').selectmenu();
        };
      })(this)
    });
  };

  ReportView.prototype.summarize = function() {
    var field;
    field = $('#summaryField option:selected').text();
    return this.viewQuery({
      success: (function(_this) {
        return function(resultCollection) {
          var results;
          results = {};
          resultCollection.each(function(result) {
            return _.each(result.toJSON(), function(value, key) {
              if (key === field) {
                if (results[value] != null) {
                  results[value]["sums"] += 1;
                  return results[value]["resultIDs"].push(result.get("_id"));
                } else {
                  results[value] = {};
                  results[value]["sums"] = 1;
                  results[value]["resultIDs"] = [];
                  return results[value]["resultIDs"].push(result.get("_id"));
                }
              }
            });
          });
          _this.$el.append("<h2>" + field + "</h2> <table id='summaryTable' class='tablesorter'> <thead> <tr> <th>Value</th> <th>Total</th> </tr> </thead> <tbody> " + (_.map(results, function(aggregates, value) {
            return "<tr> <td>" + value + "</td> <td> <button id='toggleDisaggregation'>" + aggregates["sums"] + "</button> </td> <td class='dissaggregatedResults'> " + (_.map(aggregates["resultIDs"], function(resultID) {
              return resultID;
            }).join(", ")) + " </td> </tr>";
          }).join("")) + " </tbody> </table>");
          $("button").button();
          $("a").button();
          return _.each($('table tr'), function(row, index) {
            if (index % 2 === 1) {
              return $(row).addClass("odd");
            }
          });
        };
      })(this)
    });
  };

  ReportView.prototype.toggleDisaggregation = function() {
    return $(".dissaggregatedResults").toggle();
  };

  return ReportView;

})(Backbone.View);

var UsersView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

UsersView = (function(superClass) {
  extend(UsersView, superClass);

  function UsersView() {
    this.render = bind(this.render, this);
    return UsersView.__super__.constructor.apply(this, arguments);
  }

  UsersView.prototype.initialize = function() {
    console.error("FFOOOO");
    return this.userCollection = new UserCollection();
  };

  UsersView.prototype.el = '#content';

  UsersView.prototype.events = {
    "submit form#user": "save",
    "click .loadUser": "load"
  };

  UsersView.prototype.save = function() {
    var user, userData;
    userData = $('#user').toObject({
      skipEmpty: false
    });
    userData._id = "user." + userData._id;
    user = new User({
      _id: userData._id
    });
    console.log(userData);
    user.fetch({
      success: (function(_this) {
        return function() {
          return user.save(userData, {
            success: function() {
              return _this.render();
            }
          });
        };
      })(this),
      error: (function(_this) {
        return function() {
          return user.save(userData, {
            success: function() {
              return _this.render();
            }
          });
        };
      })(this)
    });
    return false;
  };

  UsersView.prototype.load = function(event) {
    var user;
    user = new User({
      _id: $(event.target).closest("a").attr("data-user-id")
    });
    user.fetch({
      success: (function(_this) {
        return function() {
          user.set({
            _id: user.get("_id").replace(/user\./, "")
          });
          return js2form($('#user').get(0), user.toJSON());
        };
      })(this)
    });
    return false;
  };

  UsersView.prototype.render = function() {
    var fields;
    fields = "_id,password,data,name,comments".split(",");
    this.$el.html("<h2>Create/edit users</h2> <h3>Use phone number for username to enable SMS messages</h3> <form id='user'> " + (_.map(fields, function(field) {
      return "<label style='display:block' for='" + field + "'>" + (field === "_id" ? "Username" : field.humanize()) + "</label> <input id='" + field + "' name='" + field + "' type='text'></input>";
    }).join("")) + " <input type='submit'></input> </form> <h2>Click username to edit</h2> <table> <thead> " + (_.map(fields, function(field) {
      return "<th>" + (field === "_id" ? "Username" : field.humanize()) + "</th>";
    }).join("")) + " </thead> <tbody> </tbody> </table>");
    this.userCollection.fetch({
      success: (function(_this) {
        return function() {
          _this.userCollection.sortBy(function(user) {
            return user.get("_id");
          }).forEach(function(user) {
            return $("tbody").append("<tr> " + (_.map(fields, function(field) {
              var data;
              data = user.get(field);
              if (field === "_id") {
                return "<td><a class='loadUser' data-user-id='" + (user.get("_id")) + "' href=''>" + (data.replace(/user\./, "")) + "</a></td>";
              } else {
                return "<td>" + data + "</td>";
              }
            }).join("")) + " </tr>");
          });
          return $("a").button();
        };
      })(this)
    });
    $('table').addTableFilter({
      labelText: null
    });
    return $("input[type=search]").textinput();
  };

  return UsersView;

})(Backbone.View);

var MessagingView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MessagingView = (function(superClass) {
  extend(MessagingView, superClass);

  function MessagingView() {
    this.render = bind(this.render, this);
    this.checkAll = bind(this.checkAll, this);
    return MessagingView.__super__.constructor.apply(this, arguments);
  }

  MessagingView.prototype.initialize = function() {
    this.userCollection = new UserCollection();
    this.messageCollection = new MessageCollection();
    return this.max = 140;
  };

  MessagingView.prototype.el = '#content';

  MessagingView.prototype.events = {
    "click #check-all": "checkAll",
    "click .phone-number": "updateToField",
    "click input[value=Send]": "send",
    "keyup #message": "checkLength"
  };

  MessagingView.prototype.checkLength = function() {
    $("#charCount").html("Characters used: " + ($("#message").val().length) + ". Maximum allowed: " + 140.);
    if ($("#message").val().length > this.max) {
      return $("#charCount").css("color", "red");
    } else {
      return $("#charCount").css("color", "");
    }
  };

  MessagingView.prototype.send = function() {
    var messageText;
    messageText = $("#message").val();
    if (messageText.length > this.max || messageText.length === 0) {
      return false;
    }
    _.each(this.phoneNumbers, function(phoneNumber) {
      var message;
      message = new Message({
        date: moment(new Date()).format(Coconut.config.get("date_format")),
        text: messageText,
        to: phoneNumber
      });
      return message.sendSMS({
        success: function() {
          message.save();
          return $("#messageBox").append("Sent '" + messageText + "' to " + phoneNumber);
        },
        error: function(error) {
          return $("#messageBox").append("Error: [" + error + "] while sending '" + messageText + "' to " + phoneNumber);
        }
      });
    });
    return false;
  };

  MessagingView.prototype.checkAll = function() {
    $("input[type=checkbox].phone-number").attr("checked", $("#check-all").is(":checked"));
    return this.updateToField();
  };

  MessagingView.prototype.updateToField = function() {
    this.phoneNumbers = _.map($("input[type=checkbox].phone-number:checked"), function(item) {
      return $(item).attr("id").replace(/check-user\./, "");
    });
    return $("#to").html(this.phoneNumbers.join(", "));
  };

  MessagingView.prototype.render = function() {
    var fields, messageFields;
    fields = "_id,data,name,comments".split(",");
    messageFields = "date,to,text".split(",");
    this.$el.html("<h2>Send Message</h2> <h3>Select Recipients</h2> <table class='recipients'> <thead> <th></th> " + (_.map(fields, function(field) {
      return "<th>" + (field === "_id" ? "Phone Number" : field.humanize()) + "</th>";
    }).join("")) + " </thead> <tbody> </tbody> </table> <form id='message-form'> Recipients: <div id='to'></div> <label style='display:block' for='message'>Message</label> <textarea style='width:100%' id='message' name='message'></textarea> <div id='messageBox'></div> </div> <input type='submit' value='Send'></input> <span id='charCount'></span> </form> <h3>Sent Messages</h3> <table class='sent-messages'> <thead> " + (_.map(messageFields, function(field) {
      return "<th>" + field + "</th>";
    }).join("")) + " </thead> <tbody> </tbody> </table>");
    this.userCollection.fetch({
      success: (function(_this) {
        return function() {
          $("table.recipients").before("<input id='check-all' type='checkbox'></input>Select All");
          _this.userCollection.forEach(function(user) {
            if (!user.get("_id").match(/\d\d\d/)) {
              return;
            }
            return $(".recipients tbody").append("<tr> <td><input class='phone-number' id='check-" + (user.get("_id")) + "' type='checkbox'></input></td> " + (_.map(fields, function(field) {
              var data;
              data = user.get(field);
              if (field === "_id") {
                data = data.replace(/user\./, "");
              }
              return "<td>" + data + "</td>";
            }).join("")) + " </tr>");
          });
          $(".recipients tbody").append("<tr> <td><input class='phone-number' id='check-user.0787263670' type='checkbox'></input></td> <td>0787263670</td> <td></td> <td>Ritha</td> <td>RTI</td> </tr> <tr> <td><input class='phone-number' id='check-user.3141' type='checkbox'></input></td> <td>31415926</td> <td></td> <td>Test</td> <td>Doesn't actually work</td> </tr>");
          return $("a").button();
        };
      })(this)
    });
    return this.messageCollection.fetch({
      success: (function(_this) {
        return function() {
          return _this.messageCollection.forEach(function(item) {
            return $(".sent-messages tbody").append("<tr> " + (_.map(messageFields, function(field) {
              return "<td>" + (item.get(field)) + "</td>";
            }).join("")) + " </tr>");
          });
        };
      })(this)
    });
  };

  return MessagingView;

})(Backbone.View);

var HelpView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

HelpView = (function(superClass) {
  extend(HelpView, superClass);

  function HelpView() {
    return HelpView.__super__.constructor.apply(this, arguments);
  }

  HelpView.prototype.el = '#content';

  HelpView.prototype.events = {
    "click input[value=Send]": "send"
  };

  HelpView.prototype.render = function() {
    return this.$el.html("<label style='display:block' for='message'>If you are having trouble please contact your supervisor as soon as possible. You can also describe the problem in the box below and it will send a message to our support team. We'll get back to you as soon as possible.</label> <textarea style='width:100%' id='message' name='message'></textarea> <div id='messageBox'></div> </div> <input type='submit' value='Send'></input>");
  };

  HelpView.prototype.send = function() {
    var help, messageText, sync;
    messageText = $("#message").val();
    if (messageText.length === 0) {
      return false;
    }
    help = new Help({
      date: moment(new Date()).format(Coconut.config.get("date_format")),
      text: messageText,
      user: User.currentUser.id.replace(/user\./, "")
    });
    help.save();
    sync = new Sync();
    $("#messageBox").append("Attempting to 'Send Data'");
    sync.sendToCloud({
      success: function() {
        return $("#messageBox").append("Thank you for your feedback, it has been sent");
      },
      error: function() {
        return $("#messageBox").append("There was a problem sending data, but your messages has been saved. If you have connectivity you can try again by pressing the 'Send data' button at the bottom of the screen.");
      }
    });
    return false;
  };

  return HelpView;

})(Backbone.View);

var Coconut, Router,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Router = (function(superClass) {
  extend(Router, superClass);

  function Router() {
    return Router.__super__.constructor.apply(this, arguments);
  }

  Router.prototype.routes = {
    "login": "login",
    "logout": "logout",
    "design": "design",
    "select": "select",
    "show/results/:question_id": "showResults",
    "new/result/:question_id": "newResult",
    "edit/result/:result_id": "editResult",
    "delete/result/:result_id": "deleteResult",
    "delete/result/:result_id/:confirmed": "deleteResult",
    "edit/resultSummary/:question_id": "editResultSummary",
    "analyze/:form_id": "analyze",
    "delete/:question_id": "deleteQuestion",
    "edit/:question_id": "editQuestion",
    "manage": "manage",
    "sync": "sync",
    "sync/send": "syncSend",
    "sync/get": "syncGet",
    "configure": "configure",
    "map": "map",
    "reports": "reports",
    "reports/*options": "reports",
    "alerts": "alerts",
    "show/case/:caseID": "showCase",
    "users": "users",
    "messaging": "messaging",
    "help": "help",
    "": "default"
  };

  Router.prototype.route = function(route, name, callback) {
    Backbone.history || (Backbone.history = new Backbone.History);
    if (!_.isRegExp(route)) {
      route = this._routeToRegExp(route);
    }
    return Backbone.history.route(route, (function(_this) {
      return function(fragment) {
        var args;
        args = _this._extractParameters(route, fragment);
        callback.apply(_this, args);
        $('#loading').slideDown();
        _this.trigger.apply(_this, ['route:' + name].concat(args));
        return $('#loading').fadeOut();
      };
    })(this), this);
  };

  Router.prototype.help = function() {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.helpView == null) {
          Coconut.helpView = new HelpView();
        }
        return Coconut.helpView.render();
      }
    });
  };

  Router.prototype.users = function() {
    return this.adminLoggedIn({
      success: function() {
        if (Coconut.usersView == null) {
          Coconut.usersView = new UsersView();
        }
        return Coconut.usersView.render();
      }
    });
  };

  Router.prototype.messaging = function() {
    return this.adminLoggedIn({
      success: function() {
        if (Coconut.messagingView == null) {
          Coconut.messagingView = new MessagingView();
        }
        return Coconut.messagingView.render();
      }
    });
  };

  Router.prototype.login = function() {
    Coconut.loginView.callback = {
      success: function() {
        return Coconut.router.navigate("", true);
      }
    };
    return Coconut.loginView.render();
  };

  Router.prototype.userLoggedIn = function(callback) {
    return User.isAuthenticated({
      success: function(user) {
        return callback.success(user);
      },
      error: function() {
        Coconut.loginView.callback = callback;
        return Coconut.loginView.render();
      }
    });
  };

  Router.prototype.adminLoggedIn = function(callback) {
    return this.userLoggedIn({
      success: function(user) {
        if (user.isAdmin()) {
          return callback.success(user);
        }
      },
      error: function() {
        return $("#content").html("<h2>Must be an admin user</h2>");
      }
    });
  };

  Router.prototype.logout = function() {
    User.logout();
    return Coconut.router.navigate("", true);
  };

  Router.prototype["default"] = function() {
    return this.userLoggedIn({
      success: function() {
        $("#content").html("<!-- Reported/Facility Followup/Household Followup/#Tested/ (Show for Same period last year) For completed cases, average time between notification and household followup Last seven days Last 30 days Last 365 days Current month Current year Total --> <table class='summary tablesorter'> <thead><tr> <th>Question</th> <th>Not Completed</th> <th>Completed</th> </tr></thead> <tbody> </tbody> </table>");
        return Coconut.questions.each((function(_this) {
          return function(question, index) {
            $("#content table tbody").append("<tr id='" + (question.attributeSafeText()) + "'><td>" + (question.get("id")) + "</td></tr>");
            _.each(["false", "true"], function(complete) {
              var results;
              results = new ResultCollection();
              return results.fetch({
                question: question.id,
                isComplete: complete,
                success: (function(_this) {
                  return function() {
                    return $("tr#" + (question.attributeSafeText())).append("<td>" + results.length + "</td>");
                  };
                })(this)
              });
            });
            if (index + 1 === Coconut.questions.length) {
              $('table').tablesorter();
              $("table a").button();
              $("table").trigger("update");
            }
            return _.each($('table tr'), function(row, index) {
              if (index % 2 === 1) {
                return $(row).addClass("odd");
              }
            });
          };
        })(this));
      }
    });
  };

  Router.prototype.reports = function(options) {
    return this.userLoggedIn({
      success: function() {
        var reportViewOptions;
        if (Coconut.config.local.mode === "mobile") {
          return $("#content").html("Reports not available in mobile mode.");
        } else {
          options = options != null ? options.split(/\//) : void 0;
          reportViewOptions = {};
          _.each(options, function(option, index) {
            if (!(index % 2)) {
              return reportViewOptions[option] = options[index + 1];
            }
          });
          if (Coconut.reportView == null) {
            Coconut.reportView = new ReportView();
          }
          return Coconut.reportView.render(reportViewOptions);
        }
      }
    });
  };

  Router.prototype.showCase = function(caseID) {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.caseView == null) {
          Coconut.caseView = new CaseView();
        }
        Coconut.caseView["case"] = new Case({
          caseID: caseID
        });
        return Coconut.caseView["case"].fetch({
          success: function() {
            return Coconut.caseView.render();
          }
        });
      }
    });
  };

  Router.prototype.configure = function() {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.localConfigView == null) {
          Coconut.localConfigView = new LocalConfigView();
        }
        return Coconut.localConfigView.render();
      }
    });
  };

  Router.prototype.editResultSummary = function(question_id) {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.resultSummaryEditor == null) {
          Coconut.resultSummaryEditor = new ResultSummaryEditorView();
        }
        Coconut.resultSummaryEditor.question = new Question({
          id: unescape(question_id)
        });
        return Coconut.resultSummaryEditor.question.fetch({
          success: function() {
            return Coconut.resultSummaryEditor.render();
          }
        });
      }
    });
  };

  Router.prototype.editQuestion = function(question_id) {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.designView == null) {
          Coconut.designView = new DesignView();
        }
        Coconut.designView.render();
        return Coconut.designView.loadQuestion(unescape(question_id));
      }
    });
  };

  Router.prototype.deleteQuestion = function(question_id) {
    return this.userLoggedIn({
      success: function() {
        return Coconut.questions.get(unescape(question_id)).destroy({
          success: function() {
            Coconut.menuView.render();
            return Coconut.router.navigate("manage", true);
          }
        });
      }
    });
  };

  Router.prototype.sync = function(action) {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.syncView == null) {
          Coconut.syncView = new SyncView();
        }
        return Coconut.syncView.render();
      }
    });
  };

  Router.prototype.syncSend = function(action) {
    Coconut.router.navigate("", false);
    return this.userLoggedIn({
      success: function() {
        if (Coconut.syncView == null) {
          Coconut.syncView = new SyncView();
        }
        return Coconut.syncView.sync.sendToCloud({
          success: function() {
            return Coconut.syncView.update();
          }
        });
      }
    });
  };

  Router.prototype.syncGet = function(action) {
    Coconut.router.navigate("", false);
    return this.userLoggedIn({
      success: function() {
        if (Coconut.syncView == null) {
          Coconut.syncView = new SyncView();
        }
        return Coconut.syncView.sync.getFromCloud();
      }
    });
  };

  Router.prototype.manage = function() {
    return this.adminLoggedIn({
      success: function() {
        if (Coconut.manageView == null) {
          Coconut.manageView = new ManageView();
        }
        return Coconut.manageView.render();
      }
    });
  };

  Router.prototype.newResult = function(question_id) {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.questionView == null) {
          Coconut.questionView = new QuestionView();
        }
        Coconut.questionView.result = new Result({
          question: unescape(question_id)
        });
        Coconut.questionView.model = new Question({
          id: unescape(question_id)
        });
        return Coconut.questionView.model.fetch({
          success: function() {
            return Coconut.questionView.render();
          }
        });
      }
    });
  };

  Router.prototype.editResult = function(result_id) {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.questionView == null) {
          Coconut.questionView = new QuestionView();
        }
        Coconut.questionView.readonly = false;
        Coconut.questionView.result = new Result({
          _id: result_id
        });
        return Coconut.questionView.result.fetch({
          success: function() {
            Coconut.questionView.model = new Question({
              id: Coconut.questionView.result.question()
            });
            return Coconut.questionView.model.fetch({
              success: function() {
                return Coconut.questionView.render();
              }
            });
          }
        });
      }
    });
  };

  Router.prototype.deleteResult = function(result_id, confirmed) {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.questionView == null) {
          Coconut.questionView = new QuestionView();
        }
        Coconut.questionView.readonly = true;
        Coconut.questionView.result = new Result({
          _id: result_id
        });
        return Coconut.questionView.result.fetch({
          success: function() {
            if (confirmed === "confirmed") {
              return Coconut.questionView.result.destroy({
                success: function() {
                  Coconut.menuView.update();
                  return Coconut.router.navigate("show/results/" + (escape(Coconut.questionView.result.question())), true);
                }
              });
            } else {
              Coconut.questionView.model = new Question({
                id: Coconut.questionView.result.question()
              });
              return Coconut.questionView.model.fetch({
                success: function() {
                  Coconut.questionView.render();
                  $("#content").prepend("<h2>Are you sure you want to delete this result?</h2> <div id='confirm'> <a href='#delete/result/" + result_id + "/confirmed'>Yes</a> <a href='#show/results/" + (escape(Coconut.questionView.result.question())) + "'>Cancel</a> </div>");
                  $("#confirm a").button();
                  $("#content form").css({
                    "background-color": "#333",
                    "margin": "50px",
                    "padding": "10px"
                  });
                  return $("#content form label").css({
                    "color": "white"
                  });
                }
              });
            }
          }
        });
      }
    });
  };

  Router.prototype.design = function() {
    return this.userLoggedIn({
      success: function() {
        $("#content").empty();
        if (Coconut.designView == null) {
          Coconut.designView = new DesignView();
        }
        return Coconut.designView.render();
      }
    });
  };

  Router.prototype.showResults = function(question_id) {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.resultsView == null) {
          Coconut.resultsView = new ResultsView();
        }
        Coconut.resultsView.question = new Question({
          id: unescape(question_id)
        });
        return Coconut.resultsView.question.fetch({
          success: function() {
            return Coconut.resultsView.render();
          }
        });
      }
    });
  };

  Router.prototype.map = function() {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.mapView == null) {
          Coconut.mapView = new MapView();
        }
        return Coconut.mapView.render();
      }
    });
  };

  Router.prototype.startApp = function() {
    Coconut.config = new Config();
    return Coconut.config.fetch({
      success: function() {
        $("#footer-menu").html("<center> <a href='#login'>Login</a> <a href='#logout'>Logout</a> <a id='reports' href='#reports'>Reports</a> <a id='manage-button' style='display:none' href='#manage'>Manage</a> &nbsp; <a href='#sync/send'>Send data (last done: <span class='sync-sent-status'></span>)</a> <a href='#sync/get'>Update (last done: <span class='sync-get-status'></span>)</a> <a href='#help'>Help</a> <span style='font-size:75%;display:inline-block'>Version<br/><span id='version'></span></span> </center>");
        $("[data-role=footer]").navbar();
        $('#application-title').html(Coconut.config.title());
        Coconut.loginView = new LoginView();
        Coconut.questions = new QuestionCollection();
        Coconut.questionView = new QuestionView();
        Coconut.menuView = new MenuView();
        Coconut.syncView = new SyncView();
        Coconut.menuView.render();
        Coconut.syncView.update();
        return Backbone.history.start();
      },
      error: function(error) {
        console.error(error);
        if (Coconut.localConfigView == null) {
          Coconut.localConfigView = new LocalConfigView();
        }
        return Coconut.localConfigView.render();
      }
    });
  };

  return Router;

})(Backbone.Router);

Coconut = {};

Coconut.router = new Router();

Coconut.router.startApp();

Coconut.debug = function(string) {
  console.log(string);
  return $("#log").append(string + "<br/>");
};

//# sourceMappingURL=data:application/json;base64,